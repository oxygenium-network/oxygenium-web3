{
  "folderName": "scripts",
  "folderPath": ".autodoc/docs/json/packages/cli/scripts",
  "url": "https://github.com/oxygenium/oxygenium-web3/.autodoc/docs/json/packages/cli/scripts",
  "files": [
    {
      "fileName": "copy-template.js",
      "filePath": "packages/cli/scripts/copy-template.js",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/cli/scripts/copy-template.js",
      "summary": "The code above is a simple script that uses the `fs-extra` library to copy two files, `.gitignore` and `.npmignore`, from the root directory of the project to a subdirectory called `dist`. \n\nThe purpose of this script is to ensure that the two files are included in the distribution package when the project is built and published. The `.gitignore` file is used to specify files and directories that should be ignored by Git when committing changes to the repository. The `.npmignore` file is used to specify files and directories that should be ignored by npm when publishing the package to the npm registry. \n\nBy copying these files to the `dist` directory, they will be included in the distribution package along with the rest of the project files. This ensures that anyone who installs the package will have access to these files and that they will be properly ignored by Git and npm.\n\nHere is an example of how this script might be used in the larger project:\n\n```\n// package.json\n{\n  \"name\": \"my-package\",\n  \"version\": \"1.0.0\",\n  \"scripts\": {\n    \"build\": \"node build.js\",\n    \"prepublishOnly\": \"npm run build\"\n  },\n  \"devDependencies\": {\n    \"fs-extra\": \"^10.0.0\"\n  }\n}\n```\n\nIn this example, the `build` script runs the `build.js` script, which includes the code above to copy the `.gitignore` and `.npmignore` files to the `dist` directory. The `prepublishOnly` script is run automatically by npm before publishing the package to the registry, and it runs the `build` script to ensure that the distribution package includes all necessary files.\n\nOverall, this script is a small but important part of the larger project's build process, ensuring that important files are included in the distribution package and properly ignored by Git and npm.",
      "questions": "1. What is the purpose of this code?\n   - This code is copying two files, `.gitignore` and `.npmignore`, from the current directory to a subdirectory called `dist`.\n\n2. What is the `fs-extra` module and why is it being used?\n   - `fs-extra` is a Node.js module that provides additional functionality on top of the built-in `fs` module. It is being used here to copy files from one location to another.\n\n3. Are there any potential errors or exceptions that could occur with this code?\n   - Yes, there could be errors if the source files (`\".gitignore\"` and `\".npmignore\"`) do not exist in the current directory, or if the destination directory (`\"dist\"`) does not exist or is not writable. It would be a good idea to add error handling to this code to handle these cases."
    },
    {
      "fileName": "create-project.ts",
      "filePath": "packages/cli/scripts/create-project.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/cli/scripts/create-project.ts",
      "summary": "This code is a script that creates a new project based on one of three templates: base, react, or Next.js. The script is part of the oxygenium-web3 project and is written in TypeScript. \n\nThe script imports several modules, including `fs-extra`, `path`, and `child_process`. The `fs-extra` module is used to copy files and directories, while `path` is used to manipulate file paths. The `child_process` module is used to execute shell commands.\n\nThe script defines several functions that are used to prepare the project based on the selected template. The `createProject` function is the main function that is called when the script is run. It takes three arguments: the type of template to use, the root directory of the package, and the root directory of the project.\n\nThe `prepareBase`, `prepareReact`, and `prepareNextJs` functions are called based on the selected template type. These functions copy files and directories from the package to the project directory, install dependencies, and run other setup tasks. \n\nThe `copy` function is used to copy files from the package to the project directory. It takes four arguments: the root directory of the package, the root directory of the project, the directory to copy files from, and an array of file names to copy.\n\nThe script also includes license information and comments that provide additional information about the code.\n\nOverall, this script is a useful tool for quickly setting up a new project based on one of three templates. By using this script, developers can save time and ensure that their projects are set up correctly. \n\nExample usage:\n\n```\n$ oxygenium-web3 create-project react /path/to/package /path/to/project\n```",
      "questions": "1. What is the purpose of this code?\n- This code is used to create a new project with different templates (base, react, nextjs) by copying files from the oxygenium-web3 package to the project folder.\n\n2. What dependencies are required to run this code?\n- This code requires the `fs-extra`, `path`, and `child_process` modules to be imported.\n\n3. What license is this code released under?\n- This code is released under the GNU Lesser General Public License, version 3 or later."
    },
    {
      "fileName": "deploy.ts",
      "filePath": "packages/cli/scripts/deploy.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/cli/scripts/deploy.ts",
      "summary": "This code defines a function called `deployAndSaveProgress` that deploys a smart contract and saves the deployment progress. The function takes two arguments: `configuration` and `networkId`. \n\nThe `configuration` argument is an object that contains settings for the deployment process. The `networkId` argument is an identifier for the network on which the smart contract will be deployed. \n\nThe function first gets the path to the deployment file using the `getDeploymentFilePath` function. It then creates a `Deployments` object from the deployment file using the `Deployments.from` function. \n\nThe `deploy` function is then called with the `configuration`, `networkId`, and `deployments` arguments. This function deploys the smart contract and updates the `deployments` object with the deployment progress. If an error occurs during deployment, the function catches the error, saves the deployment progress to the deployment file, logs an error message, and rethrows the error. \n\nAfter successful deployment, the function saves the deployment progress to the deployment file using the `deployments.saveToFile` function. The third argument of this function is a boolean that indicates whether to overwrite the existing deployment file or append to it. In this case, it is set to `true` to overwrite the file. \n\nFinally, the function logs a success message to the console. \n\nThis function is likely used in the larger project to automate the deployment process of smart contracts. It provides a convenient way to deploy a contract and save the deployment progress in a file for future reference. Here is an example of how this function might be used:\n\n```\nimport { Configuration } from '../src/types'\nimport { deployAndSaveProgress } from '../src/deployer'\nimport { NetworkId } from '@oxygenium/web3'\n\nconst configuration: Configuration = {\n  // configuration settings for deployment\n}\n\nconst networkId: NetworkId = 'mainnet'\n\ndeployAndSaveProgress(configuration, networkId)\n  .then(() => console.log('Deployment complete!'))\n  .catch(error => console.error(error))\n```",
      "questions": "1. What is the purpose of this code?\n   - This code is for deploying and saving progress of a project called Alephium.\n2. What dependencies does this code have?\n   - This code imports types from '../src/types', functions from '../src/deployment' and '../src', and a NetworkId from '@oxygenium/web3'.\n3. What license is this code released under?\n   - This code is released under the GNU Lesser General Public License, version 3 or later."
    },
    {
      "fileName": "start-devnet.js",
      "filePath": "packages/cli/scripts/start-devnet.js",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/cli/scripts/start-devnet.js",
      "summary": "This file contains code that is used to launch and manage a local development network (devnet) for the Alephium blockchain. The devnet is used for testing and development purposes, and is not part of the main Alephium network. \n\nThe code imports several Node.js modules, including `fs`, `fs-extra`, `process`, `path`, `fetch`, `spawn`, and `os`. It also imports a function called `isDevnetLive` from another module located in the `src` directory. \n\nThe `devDir` constant is defined as the path to the directory where the devnet files will be stored. This directory is created in the user's home directory. \n\nThe `_downloadFullNode` function is an internal function that downloads the Alephium full node software from GitHub. It takes two arguments: the version tag of the software to download, and the name of the file to save the downloaded software to. It uses the `fetch` module to download the software, and saves it to the specified file using the `fs` module. \n\nThe `downloadFullNode` function is called by `startDevnet` to download the full node software if it has not already been downloaded. It takes three arguments: the version tag of the software to download, the path to the devnet directory, and the name of the file to save the downloaded software to. If the devnet directory does not exist, it is created using the `fs` module. If the specified file does not exist, `_downloadFullNode` is called to download the software. \n\nThe `launchDevnet` function is called by `startDevnet` to launch the devnet. It takes two arguments: the path to the devnet directory, and the name of the file containing the full node software. It first checks if a devnet is already running by reading the PID (process ID) from a file in the devnet directory. If a PID is found, it kills the running process. It then deletes several directories and files in the devnet directory to ensure a clean start. Finally, it launches the full node software as a child process using the `spawn` module, passing several environment variables to configure the software. The PID of the child process is saved to a file in the devnet directory. \n\nThe `testWallet`, `testWalletPwd`, and `mnemonic` constants are used to create a test wallet for use in the devnet. \n\nThe `prepareWallet`, `createWallet`, and `unlockWallet` functions are used to create and unlock the test wallet. `prepareWallet` first checks if the test wallet exists, and if it does, unlocks it. If the test wallet does not exist, `createWallet` is called to create it. `createWallet` sends an HTTP PUT request to the devnet to create the wallet, passing the test wallet name, password, and mnemonic as parameters. It then sends an HTTP POST request to set the active address of the wallet. `unlockWallet` sends an HTTP POST request to unlock the test wallet. \n\nThe `timeout` and `wait` functions are used to wait for the devnet to become live. `timeout` returns a promise that resolves after a specified number of milliseconds. `wait` calls `isDevnetLive` to check if the devnet is live. If it is not, it waits for one second and then calls itself recursively. If it is, it waits for one second and then returns a resolved promise. \n\nThe `startDevnet` function is the main function of the file. It takes two arguments: the version tag of the full node software to use, and the path to the configuration file to use. It first downloads the full node software and copies the configuration file to the devnet directory. It then checks if the devnet is already running by calling `isDevnetLive`. If it is, it prints an error message and exits. If it is not, it launches the devnet by calling `launchDevnet`, waits for it to become live by calling `wait`, and prepares the test wallet by calling `prepareWallet`. Finally, it prints a message indicating that the devnet is ready. \n\nOverall, this file provides a convenient way to launch and manage a local devnet for the Alephium blockchain, and to create and manage a test wallet for use in the devnet. It is likely used in conjunction with other files and modules in the Alephium project to facilitate testing and development of the blockchain.",
      "questions": "1. What is the purpose of this code?\n- This code is used to download and launch a devnet for the Alephium blockchain project, as well as prepare a test wallet for use with the devnet.\n\n2. What dependencies does this code have?\n- This code imports several external libraries, including `cross-fetch`, `fs`, `fs-extra`, `os`, `path`, and `child_process`.\n\n3. What license is this code released under?\n- This code is released under the GNU Lesser General Public License, version 3 or later."
    },
    {
      "fileName": "stop-devnet.js",
      "filePath": "packages/cli/scripts/stop-devnet.js",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/cli/scripts/stop-devnet.js",
      "summary": "This code defines a function called `stopDevnet` that is used to stop a running Alephium devnet. The devnet is a local development network used for testing and development purposes. The function reads a PID (process ID) from a file called `oxygenium.pid` located in the `devDir` directory. The PID is used to identify the running devnet process. If a PID is found, the function kills the process using the `process.kill` method and logs a message indicating that the devnet has been stopped. If no PID is found, an error message is logged.\n\nThis function is part of the `oxygenium-web3` project and is used to provide a convenient way to stop a running devnet. It can be called from other parts of the project or from external scripts. For example, a developer may want to stop the devnet before running a new test suite or before making changes to the devnet configuration.\n\nHere is an example of how this function can be used:\n\n```javascript\nconst { stopDevnet } = require('oxygenium-web3')\n\n// Stop the running devnet\nstopDevnet()\n```\n\nOverall, this code provides a simple and effective way to stop a running Alephium devnet, which is an important part of the development process for the `oxygenium-web3` project.",
      "questions": "1. What is the purpose of this code?\n   This code is used to stop a running Devnet process in the Alephium project.\n\n2. What dependencies are required for this code to run?\n   This code requires the 'fs', 'process', 'path', and './start-devnet' modules to be imported.\n\n3. What license is this code released under?\n   This code is released under the GNU Lesser General Public License, version 3 or later."
    }
  ],
  "folders": [],
  "summary": "The `cli/scripts` folder in the `oxygenium-web3` project contains several scripts that are used for various purposes such as setting up new projects, deploying smart contracts, and managing a local Alephium development network (devnet).\n\n`copy-template.js` is a script that copies the `.gitignore` and `.npmignore` files from the root directory of the project to the `dist` subdirectory. This ensures that these files are included in the distribution package and properly ignored by Git and npm. For example, in the `package.json` file, the `build` script might run `build.js`, which includes this script to copy the necessary files:\n\n```json\n{\n  \"scripts\": {\n    \"build\": \"node build.js\",\n    \"prepublishOnly\": \"npm run build\"\n  }\n}\n```\n\n`create-project.ts` is a script that creates a new project based on one of three templates: base, react, or Next.js. It provides a convenient way to set up a new project quickly and correctly. For example, to create a new React project, you might run:\n\n```bash\n$ oxygenium-web3 create-project react /path/to/package /path/to/project\n```\n\n`deploy.ts` defines a function called `deployAndSaveProgress` that deploys a smart contract and saves the deployment progress. This function is likely used in the larger project to automate the deployment process of smart contracts. Here's an example of how this function might be used:\n\n```javascript\nimport { Configuration } from '../src/types'\nimport { deployAndSaveProgress } from '../src/deployer'\nimport { NetworkId } from '@oxygenium/web3'\n\nconst configuration: Configuration = {\n  // configuration settings for deployment\n}\n\nconst networkId: NetworkId = 'mainnet'\n\ndeployAndSaveProgress(configuration, networkId)\n  .then(() => console.log('Deployment complete!'))\n  .catch(error => console.error(error))\n```\n\n`start-devnet.js` contains code to launch and manage a local Alephium devnet for testing and development purposes. It provides a convenient way to launch and manage a local devnet and create a test wallet for use in the devnet. The main function, `startDevnet`, can be called with the version tag of the full node software and the path to the configuration file:\n\n```javascript\nconst { startDevnet } = require('oxygenium-web3')\n\nstartDevnet('v1.0.0', '/path/to/config/file')\n```\n\n`stop-devnet.js` defines a function called `stopDevnet` that is used to stop a running Alephium devnet. This function can be called from other parts of the project or from external scripts to stop the devnet before running new tests or making changes to the devnet configuration:\n\n```javascript\nconst { stopDevnet } = require('oxygenium-web3')\n\n// Stop the running devnet\nstopDevnet()\n```\n\nOverall, the `cli/scripts` folder contains essential scripts that facilitate various tasks in the `oxygenium-web3` project, such as project setup, smart contract deployment, and devnet management.",
  "questions": ""
}