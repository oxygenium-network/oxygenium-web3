{
  "fileName": "cli_internal.ts",
  "filePath": "packages/cli/cli_internal.ts",
  "url": "https://github.com/oxygenium/oxygenium-web3/packages/cli/cli_internal.ts",
  "summary": "This file contains a set of commands that can be used to manage and interact with a smart contract project built on the Oxygenium blockchain. The file imports several modules from the `@oxygenium/web3` package, which provides a set of tools for interacting with the Oxygenium blockchain. \n\nThe `getConfig` function is used to load the configuration file for the project. The function takes an optional `options` parameter, which can be used to specify the path to the configuration file. If no path is specified, the function will look for a file named `oxygenium.config.{ts|js}` in the project directory. The function returns an object containing the configuration values for the project.\n\nThe `checkAndGetNetworkId` function is used to validate the network ID specified in the command line arguments. If no network ID is specified, the function returns the default network ID. If an invalid network ID is specified, the function throws an error.\n\nThe `program` object is used to define a set of commands that can be executed from the command line. The `init` command is used to create a new project directory with a specified template. The `devnet` command is used to start or stop a local development network. The `compile` command is used to compile the smart contracts in the project. The `test` command is used to run tests for the smart contracts. The `deploy` command is used to deploy the smart contracts to a specified network.\n\nThe `compile` command uses the `Project.build` method from the `@oxygenium/web3` package to compile the smart contracts. The method takes several parameters, including the compiler options, the source directory, and the artifact directory. The `codegen` function is used to generate TypeScript code from the contract artifacts.\n\nThe `test` command uses the `jest` package to run tests for the smart contracts. The command takes several options, including the path to the test directory, the name of a specific test file, and a regular expression pattern to match test names.\n\nThe `deploy` command uses the `deployAndSaveProgress` function to deploy the smart contracts to a specified network. The function takes the project configuration and the network ID as parameters.\n\nOverall, this file provides a set of tools for managing and interacting with a smart contract project built on the Oxygenium blockchain. The commands can be executed from the command line to perform various tasks, such as compiling the smart contracts, running tests, and deploying the contracts to a network.",
  "questions": "1. What is the purpose of this code file?\n- This code file contains a CLI tool for managing Oxygenium projects, including creating new projects, starting/stopping a devnet, compiling and testing contracts, and deploying contracts.\n\n2. What license is this code file released under?\n- This code file is released under the GNU Lesser General Public License, either version 3 or any later version.\n\n3. What are the available options for the `test` command?\n- The `test` command has several available options, including specifying the test directory path, running only one test file, running tests that match a regex pattern, running tests serially in the current process, displaying individual test results with the test suite hierarchy, and preventing tests from printing messages through the console."
}