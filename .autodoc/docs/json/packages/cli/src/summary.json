{
  "folderName": "src",
  "folderPath": ".autodoc/docs/json/packages/cli/src",
  "url": "https://github.com/oxygenium/oxygenium-web3/.autodoc/docs/json/packages/cli/src",
  "files": [
    {
      "fileName": "codegen.ts",
      "filePath": "packages/cli/src/codegen.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/cli/src/codegen.ts",
      "summary": "This code is responsible for generating TypeScript code for the Alephium blockchain project. It focuses on creating code for contracts, scripts, and deployment files. The generated code allows developers to interact with the Alephium blockchain using TypeScript, making it easier to build and test applications.\n\nThe main functions in this code are:\n\n- `genContract`: Generates TypeScript code for a given contract, including methods for calling contract functions, fetching contract state, and subscribing to contract events.\n- `genScript`: Generates TypeScript code for a given script, including a method to execute the script on the blockchain.\n- `genContracts`, `genScripts`, and `genIndexTs`: These functions generate TypeScript files for all contracts and scripts in the project, as well as an index file that exports all generated code.\n- `genDeploymentsType` and `genLoadDeployments`: These functions generate TypeScript code for loading deployment information for contracts and scripts, based on the network they are deployed on.\n\nHere's an example of how the generated code might be used in a larger project:\n\n```typescript\nimport { MyContract, MyScript } from '@oxygenium/web3';\n\n// Deploy a contract\nconst contractInstance = await MyContract.deploy(params);\n\n// Call a contract method\nconst result = await contractInstance.methods.myMethod(params);\n\n// Execute a script\nconst scriptResult = await MyScript.execute(params);\n```\n\nOverall, this code generation module simplifies the process of interacting with the Alephium blockchain by providing a TypeScript interface for contracts and scripts.",
      "questions": "1. **What is the purpose of the `toTsType` function?**\n\n   The `toTsType` function is used to convert a given `ralphType` (a custom type used in the Alephium project) to its corresponding TypeScript type. It handles basic types like 'U256', 'I256', 'Bool', 'Address', and 'ByteVec', as well as array types.\n\n2. **How does the `genContract` function work?**\n\n   The `genContract` function generates TypeScript code for a given contract. It takes a `Contract` object and an `artifactRelativePath` as input, and returns a string containing the generated TypeScript code. The generated code includes type definitions, class definitions, and methods for interacting with the contract on the blockchain.\n\n3. **What is the purpose of the `genLoadDeployments` function?**\n\n   The `genLoadDeployments` function generates TypeScript code for loading deployment information of contracts for different network IDs. It takes a `Configuration` object as input and generates a TypeScript file named `deployments.ts` in the specified output directory. The generated code includes functions for loading deployment information based on the network ID and deployer address, as well as type definitions for deployment results."
    },
    {
      "fileName": "deployment.ts",
      "filePath": "packages/cli/src/deployment.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/cli/src/deployment.ts",
      "summary": "The code in this file is part of the deployment process for Alephium smart contracts and scripts. It provides functionality to deploy contracts and execute scripts on the Alephium blockchain, as well as manage deployment results and configurations.\n\nThe `Deployments` class manages deployment results for multiple addresses. It can load deployment results from a file, save them back to a file, and retrieve deployment results for a specific address or group. The `DeploymentsPerAddress` class represents deployment results for a single address, including deployed contracts, executed scripts, and migrations.\n\nThe `createDeployer` function creates a `Deployer` object, which provides methods to deploy contracts, run scripts, and retrieve deployment results. It takes a network configuration, a signer (private key wallet), and maps for deployment results as input. The `deployContract` and `runScript` methods in the `Deployer` object handle the deployment of contracts and execution of scripts, respectively. They also manage the deployment results, updating them if necessary.\n\nThe `deploy` function is the main entry point for deploying contracts and executing scripts. It takes a configuration object, a network ID, and a `Deployments` object as input. It first validates the provided configuration, compiles the project, and then iterates through the deployment scripts, executing them using the `Deployer` object. The deployment results are updated accordingly.\n\nThe `deployToDevnet` function is a convenience function for deploying to the Alephium devnet. It loads the configuration, creates an empty `Deployments` object, and calls the `deploy` function with the devnet network ID.\n\nIn summary, this code provides a comprehensive deployment process for Alephium smart contracts and scripts, managing deployment results and configurations, and allowing users to deploy and execute their code on the Alephium blockchain.",
      "questions": "1. **Question**: What is the purpose of the `oxygenium-web3` project?\n   **Answer**: The `oxygenium-web3` project is a library that provides functionalities for interacting with the Alephium blockchain, such as deploying and executing smart contracts, managing accounts, and handling transactions.\n\n2. **Question**: How does the `Deployments` class handle saving and loading deployment information?\n   **Answer**: The `Deployments` class provides methods like `saveToFile`, `from`, and `load` to handle saving and loading deployment information. It saves the deployment information to a JSON file and reads from it when loading the data.\n\n3. **Question**: How does the `deploy` function work and what are its main components?\n   **Answer**: The `deploy` function is responsible for deploying smart contracts and executing scripts on the Alephium blockchain. It takes a configuration object, a network ID, and a `Deployments` instance as input. The function first validates the network configuration, compiles the project, and then iterates through the deployment scripts, executing each script using the `Deployer` instance created for each signer."
    },
    {
      "fileName": "index.ts",
      "filePath": "packages/cli/src/index.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/cli/src/index.ts",
      "summary": "This code exports various modules from the oxygenium-web3 project. The purpose of this file is to make these modules available for use in other parts of the project. \n\nThe `export * from` syntax is used to export all of the functions, classes, and variables from the specified modules. In this case, the code is exporting from four different modules: `types`, `utils`, `deployment`, and `codegen`. \n\nThe `types` module likely contains type definitions for various objects used throughout the project. For example, it may define the structure of a block or transaction object. \n\nThe `utils` module likely contains utility functions that can be used throughout the project. These functions may include things like encoding and decoding data, or formatting output. \n\nThe `deployment` module likely contains functions related to deploying and interacting with smart contracts on the Alephium blockchain. \n\nThe `codegen` module likely contains functions related to generating code for smart contracts. This may include generating Solidity code from higher-level languages, or generating TypeScript interfaces from Solidity contracts. \n\nBy exporting these modules, other parts of the project can import them and use their functions and types. For example, a module that interacts with the Alephium blockchain may import the `deployment` module to deploy a new smart contract. \n\nOverall, this file serves as a central location for exporting various modules from the oxygenium-web3 project, making them available for use throughout the project.",
      "questions": "1. What is the purpose of the `oxygenium-web3` project?\n- The `oxygenium-web3` project is not described in this code file, so a smart developer might want to know more about the overall purpose and goals of the project.\n\n2. What are the contents of the `types` and `utils` modules?\n- The code exports from the `types` and `utils` modules are referenced in this file, so a smart developer might want to know what functions and data types are included in these modules.\n\n3. What is the `deployment` module used for?\n- The code exports from the `deployment` module are referenced in this file, so a smart developer might want to know what functionality the `deployment` module provides and how it is used within the project."
    },
    {
      "fileName": "types.ts",
      "filePath": "packages/cli/src/types.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/cli/src/types.ts",
      "summary": "This file contains various interfaces, functions, and classes that are used in the Alephium project. The code imports several modules from the `@oxygenium/web3` package, which provides a set of tools for interacting with the Alephium blockchain. \n\nThe `Network` interface defines the properties of a network, including the network ID, node URL, private keys, deployment status file, and confirmations. The `Configuration` interface defines the configuration options for the Alephium project, including the node version, node configuration file, source directory, artifact directory, deployment script directory, and compiler options. \n\nThe `DEFAULT_CONFIGURATION_VALUES` object defines the default configuration values for the Alephium project, including the default network ID, network settings, and compiler options. \n\nThe `Environment` interface defines the environment for the Alephium project, including the configuration, network, and node provider. The `getEnv` function returns an environment object based on the specified configuration file name and network ID. \n\nThe `ExecutionResult` interface defines the result of executing a script or contract, including the transaction ID, unsigned transaction, signature, gas amount, gas price, block hash, and code hash. The `DeployContractExecutionResult` interface extends the `ExecutionResult` interface and adds the contract instance and issue token amount properties. The `RunScriptResult` interface extends the `ExecutionResult` interface and adds the group index property. \n\nThe `Deployer` interface defines the properties and methods of a deployer, including the provider, account, `deployContract` method, `runScript` method, `getDeployContractResult` method, and `getRunScriptResult` method. The `DeployFunction` interface defines a deploy function that takes a deployer and network as arguments and returns a promise that resolves to `void` or `boolean`. \n\nOverall, this file provides the necessary interfaces, functions, and classes for interacting with the Alephium blockchain and deploying contracts and scripts. It is an essential part of the Alephium project and is used extensively throughout the project.",
      "questions": "1. What is the purpose of this code file?\n   - This code file is part of the Alephium project and provides interfaces and functions related to deploying contracts and running scripts on the Alephium network.\n\n2. What is the license for this code file?\n   - This code file is licensed under the GNU Lesser General Public License, version 3 or later.\n\n3. What are the default network configurations provided by this code file?\n   - This code file provides default network configurations for the devnet, testnet, and mainnet networks, including network IDs, confirmation numbers, and private keys for devnet."
    },
    {
      "fileName": "utils.ts",
      "filePath": "packages/cli/src/utils.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/cli/src/utils.ts",
      "summary": "This file contains several utility functions that are used in the Alephium project. \n\nThe `loadConfig` function takes a filename as input and returns a configuration object. It first checks if the file exists and then loads the content of the file using `require`. The loaded content is expected to have a default export that matches the `Configuration` type defined in `types.ts`. The function then merges the loaded configuration with the default configuration values and returns the resulting object.\n\nThe `getConfigFile` function returns the path to the Alephium configuration file. It first checks if `oxygenium.config.ts` exists in the project root directory, and if not, it checks for `oxygenium.config.js`. If neither file exists, it returns the path to the default configuration file located in the `templates/base` directory.\n\nThe `isNetworkLive` function takes a URL as input and returns a boolean indicating whether the network at that URL is live. It sends a GET request to the `/infos/node` endpoint of the network and checks if the response status is 200.\n\nThe `isDevnetLive` function is a convenience function that checks if the local development network is live by calling `isNetworkLive` with the URL `http://127.0.0.1:22973`.\n\nThe `getDeploymentFilePath` function takes a configuration object and a network ID as input and returns the path to the deployment status file for that network. If the network object in the configuration has a `deploymentStatusFile` property, that value is returned. Otherwise, the function returns the path to a default deployment status file located in the `artifactDir` directory of the configuration.\n\nThe `getNetwork` function takes a configuration object and a network ID as input and returns the network object for that ID. The function first retrieves the network object from the configuration using the network ID as the key. It then merges the retrieved object with the default network values for that ID and returns the resulting object.\n\nOverall, these functions provide useful utilities for loading and working with Alephium configurations and networks. They can be used in various parts of the Alephium project to simplify configuration management and network interaction.",
      "questions": "1. What is the purpose of this code file?\n- This code file contains functions related to loading configuration, checking network status, and getting network information for the Alephium project.\n\n2. What is the license for this code file?\n- This code file is licensed under the GNU Lesser General Public License, version 3 or later.\n\n3. What external dependencies does this code file have?\n- This code file imports the `path` and `fs` modules from Node.js, as well as types and functions from other files in the `oxygenium-web3` project such as `types` and `@oxygenium/web3`. It also uses the `fetch` function, which is a global function in web browsers but needs to be imported in Node.js."
    }
  ],
  "folders": [],
  "summary": "The `cli/src` folder in the `oxygenium-web3` project contains code for generating TypeScript interfaces, deploying smart contracts and scripts, and managing configurations and networks. It is an essential part of the project, providing developers with tools to interact with the Alephium blockchain.\n\nThe `codegen.ts` file generates TypeScript code for contracts, scripts, and deployment files. This simplifies the process of interacting with the Alephium blockchain by providing a TypeScript interface for contracts and scripts. For example:\n\n```typescript\nimport { MyContract, MyScript } from '@oxygenium/web3';\n\n// Deploy a contract\nconst contractInstance = await MyContract.deploy(params);\n\n// Call a contract method\nconst result = await contractInstance.methods.myMethod(params);\n\n// Execute a script\nconst scriptResult = await MyScript.execute(params);\n```\n\nThe `deployment.ts` file provides functionality to deploy contracts and execute scripts on the Alephium blockchain, as well as manage deployment results and configurations. It includes the `Deployments` class for managing deployment results, the `createDeployer` function for creating a `Deployer` object, and the `deploy` function for deploying contracts and executing scripts.\n\nThe `index.ts` file exports various modules from the project, making them available for use in other parts of the project. It exports from four different modules: `types`, `utils`, `deployment`, and `codegen`.\n\nThe `types.ts` file contains interfaces, functions, and classes for interacting with the Alephium blockchain and deploying contracts and scripts. It defines the `Network`, `Configuration`, `Environment`, `ExecutionResult`, `DeployContractExecutionResult`, `RunScriptResult`, `Deployer`, and `DeployFunction` interfaces.\n\nThe `utils.ts` file provides utility functions for loading and working with Alephium configurations and networks. It includes the `loadConfig`, `getConfigFile`, `isNetworkLive`, `isDevnetLive`, `getDeploymentFilePath`, and `getNetwork` functions.\n\nIn summary, the `cli/src` folder in the `oxygenium-web3` project provides essential tools for developers to interact with the Alephium blockchain. It simplifies the process of generating TypeScript interfaces, deploying smart contracts and scripts, and managing configurations and networks.",
  "questions": ""
}