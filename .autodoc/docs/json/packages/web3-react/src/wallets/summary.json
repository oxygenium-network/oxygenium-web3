{
  "folderName": "wallets",
  "folderPath": ".autodoc/docs/json/packages/web3-react/src/wallets",
  "url": "https://github.com/oxygenium/oxygenium-web3/.autodoc/docs/json/packages/web3-react/src/wallets",
  "files": [
    {
      "fileName": "index.ts",
      "filePath": "packages/web3-react/src/wallets/index.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3-react/src/wallets/index.ts",
      "summary": "This code defines a function called `getWallets` that returns an array of three different wallet connectors. These connectors are used to interact with different types of cryptocurrency wallets in the Alephium project.\n\nThe first connector is called `injected` and is imported from the `./connectors/injected` file. This connector is used to interact with wallets that are injected into the browser, such as MetaMask. The `injected` function takes an empty object as an argument and returns an object with methods for interacting with the injected wallet.\n\nThe second connector is called `walletConnect` and is imported from the `./connectors/walletConnect` file. This connector is used to interact with wallets that support the WalletConnect protocol, such as Trust Wallet. The `walletConnect` function takes an empty object as an argument and returns an object with methods for interacting with the WalletConnect wallet.\n\nThe third connector is called `desktopWallet` and is imported from the `./connectors/desktopWallet` file. This connector is used to interact with wallets that are installed on the user's desktop, such as Alephium Desktop Wallet. The `desktopWallet` function takes an empty object as an argument and returns an object with methods for interacting with the desktop wallet.\n\nThe `getWallets` function takes an optional object as an argument with two properties: `appName` and `shimDisconnect`. These properties are not used in the function and are therefore left empty. The function then returns an array of the three wallet connectors, which can be used in other parts of the Alephium project to interact with different types of wallets.\n\nExample usage:\n\n```\nimport { getWallets } from 'oxygenium-web3'\n\nconst wallets = getWallets({})\nconsole.log(wallets) // [injected({}), walletConnect({}), desktopWallet()]\n```",
      "questions": "1. What is the purpose of this code file?\n- This code file is part of the Alephium project and contains a function that returns an array of wallet connectors.\n\n2. What are the available wallet connectors in this code?\n- The available wallet connectors in this code are `injected`, `walletConnect`, and `desktopWallet`.\n\n3. Are there any parameters that can be passed to the `getWallets` function?\n- Yes, the `getWallets` function takes an object as its parameter with optional properties `appName` and `shimDisconnect`."
    },
    {
      "fileName": "useDefaultWallets.tsx",
      "filePath": "packages/web3-react/src/wallets/useDefaultWallets.tsx",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3-react/src/wallets/useDefaultWallets.tsx",
      "summary": "This code defines a function called `useDefaultWallets` that returns an array of `WalletProps` objects. The purpose of this function is to provide a default set of wallets for the Alephium project. \n\nThe function imports another function called `getWallets` from a file located in the same directory. This function is not defined in the code provided, but it is likely that it retrieves a list of wallets from some source, such as a database or API. The `getWallets` function takes an empty object as an argument, which suggests that it may have additional options for filtering or sorting the list of wallets.\n\nThe `useDefaultWallets` function simply calls `getWallets` with an empty object and returns the resulting array of `WalletProps` objects. It is not clear from the code what properties are included in a `WalletProps` object, but it can be assumed that they contain information about a wallet, such as its address, balance, and transaction history.\n\nThis function may be used in the larger Alephium project to provide a default set of wallets for testing or demonstration purposes. For example, if the project includes a user interface for managing wallets, the `useDefaultWallets` function could be used to populate the initial list of wallets displayed to the user. Alternatively, the function could be used in automated tests to ensure that certain wallets are always present and have expected properties.\n\nHere is an example of how the `useDefaultWallets` function might be used in a React component:\n\n```\nimport React from 'react'\nimport useDefaultWallets from 'oxygenium-web3'\n\nfunction WalletList() {\n  const wallets = useDefaultWallets()\n\n  return (\n    <ul>\n      {wallets.map(wallet => (\n        <li key={wallet.address}>\n          {wallet.address} - {wallet.balance}\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\nIn this example, the `useDefaultWallets` function is called to retrieve an array of wallets, which are then mapped to a list of `<li>` elements displaying the wallet address and balance. This component could be used to display a list of default wallets in a user interface.",
      "questions": "1. What is the purpose of the `getWallets` function being imported from `./`?\n   - The smart developer might ask what the `getWallets` function does and what its parameters are, as it is being used in the `useDefaultWallets` function.\n\n2. What is the expected output of the `useDefaultWallets` function?\n   - The smart developer might ask what the `useDefaultWallets` function returns and how it is being used in the project.\n\n3. Are there any other functions or variables being exported from this file?\n   - The smart developer might ask if there are any other exports from this file besides the `useDefaultWallets` function, as it is the only export being explicitly defined."
    },
    {
      "fileName": "wallet.ts",
      "filePath": "packages/web3-react/src/wallets/wallet.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3-react/src/wallets/wallet.ts",
      "summary": "This file contains TypeScript code that defines two interfaces: `WalletOptions` and `WalletProps`. These interfaces are used to define the options and properties of a wallet component in the Alephium web3 project.\n\nThe `WalletOptions` interface defines two optional properties: `appName` and `shimDisconnect`. The `appName` property is a string that represents the name of the application that is using the wallet component. The `shimDisconnect` property is a boolean that indicates whether the wallet should disconnect from the application when it is closed.\n\nThe `WalletProps` interface defines several required properties: `id`, `name`, and `logos`, as well as several optional properties: `shortName`, `logoBackground`, `scannable`, `installed`, and `downloadUrls`. The `id` property is a string that represents the unique identifier of the wallet component. The `name` property is a string that represents the name of the wallet. The `shortName` property is an optional string that represents a shortened version of the wallet name. The `logos` property is an object that contains several ReactNode properties that represent different logos for the wallet component. The `logoBackground` property is an optional string that represents the background color of the wallet logo. The `scannable` property is an optional boolean that indicates whether the wallet can be scanned. The `installed` property is an optional boolean that indicates whether the wallet is installed. The `downloadUrls` property is an optional object that contains key-value pairs of download URLs for the wallet component.\n\nThese interfaces are used throughout the Alephium web3 project to define the options and properties of wallet components. For example, a developer might use these interfaces to create a new wallet component and pass in the appropriate options and properties. Here is an example of how these interfaces might be used:\n\n```\nimport { WalletOptions, WalletProps } from 'oxygenium-web3'\n\nconst walletOptions: WalletOptions = {\n  appName: 'My App',\n  shimDisconnect: true\n}\n\nconst walletProps: WalletProps = {\n  id: 'my-wallet',\n  name: 'My Wallet',\n  shortName: 'MW',\n  logos: {\n    default: <MyWalletLogo />,\n    transparent: <MyWalletLogoTransparent />,\n    connectorButton: <MyWalletConnectorButton />,\n    qrCode: <MyWalletQRCode />,\n    appIcon: <MyWalletAppIcon />,\n    mobile: <MyWalletMobileLogo />\n  },\n  logoBackground: '#FFFFFF',\n  scannable: true,\n  installed: true,\n  downloadUrls: {\n    windows: 'https://my-wallet.com/windows',\n    mac: 'https://my-wallet.com/mac',\n    linux: 'https://my-wallet.com/linux'\n  }\n}\n```",
      "questions": "1. What is the purpose of this code file?\n- This code file defines two types, `WalletOptions` and `WalletProps`, which are likely used in a React component related to wallets.\n\n2. What is the license for this code?\n- This code is licensed under the GNU Lesser General Public License, version 3 or later.\n\n3. What is the expected format and content of the `WalletProps` type?\n- The `WalletProps` type includes several properties related to a wallet, such as `id`, `name`, and `logos`. It also includes optional properties such as `shortName`, `logoBackground`, and `downloadUrls`."
    }
  ],
  "folders": [
    {
      "folderName": "connectors",
      "folderPath": ".autodoc/docs/json/packages/web3-react/src/wallets/connectors",
      "url": "https://github.com/oxygenium/oxygenium-web3/.autodoc/docs/json/packages/web3-react/src/wallets/connectors",
      "files": [
        {
          "fileName": "desktopWallet.tsx",
          "filePath": "packages/web3-react/src/wallets/connectors/desktopWallet.tsx",
          "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3-react/src/wallets/connectors/desktopWallet.tsx",
          "summary": "This code defines a function called `desktopWallet` that returns a `WalletProps` object. The purpose of this function is to provide a connector configuration for the desktop wallet. \n\nThe function first imports `WalletProps` from the `../wallet` file and `supportedConnectors` from the `../../constants/supportedConnectors` file. `WalletProps` is likely an interface or type that defines the properties of a wallet object, while `supportedConnectors` is an array of objects that represent different wallet connectors. \n\nThe `desktopWallet` function then searches through the `supportedConnectors` array to find the connector with an `id` of `'desktopWallet'`. If it cannot find this connector, it throws an error. Otherwise, it returns the `desktopWalletConnector` object as a `WalletProps` object. \n\nThis code is likely used in the larger project to provide a standardized way of accessing the desktop wallet connector configuration. Other parts of the project can import this function and use it to retrieve the necessary configuration information for the desktop wallet. \n\nExample usage:\n\n```\nimport { desktopWallet } from 'oxygenium-web3'\n\nconst walletConfig = desktopWallet()\nconsole.log(walletConfig) // outputs the desktop wallet connector configuration as a WalletProps object\n```",
          "questions": "1. What is the purpose of this code?\n   - This code exports a function called `desktopWallet` that returns a `WalletProps` object for the desktop wallet connector configuration.\n\n2. What is the `WalletProps` type and where is it defined?\n   - The `WalletProps` type is imported from the `../wallet` file. Its definition is not shown in this code snippet.\n\n3. What is the `supportedConnectors` constant and where is it defined?\n   - The `supportedConnectors` constant is imported from the `../../constants/supportedConnectors` file. Its definition is not shown in this code snippet."
        },
        {
          "fileName": "injected.tsx",
          "filePath": "packages/web3-react/src/wallets/connectors/injected.tsx",
          "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3-react/src/wallets/connectors/injected.tsx",
          "summary": "This code defines a function called `injected` that returns an object with properties related to a wallet. The purpose of this code is to provide information about a wallet that is injected into a web3 provider. \n\nThe function takes an argument called `_walletOptions`, but it is not used in the function. Instead, the function first checks if the `window` object is defined, which indicates that the wallet is installed as a browser extension. If the `window` object is not defined, the function checks if the user is on a mobile device and if the wallet is not installed. If both conditions are true, the function sets a flag to indicate that the wallet should use WalletConnect, which is a protocol for connecting wallets to decentralized applications. \n\nThe function then returns an object with the following properties:\n- `id`: a string that identifies the wallet as \"injected\"\n- `name`: a string that describes the name of the wallet as \"Extension Wallet\"\n- `shortName`: a string that provides a shorter name for the wallet as \"browser\"\n- `scannable`: a boolean that indicates whether the wallet can be scanned (presumably by a QR code)\n- `logos`: an object that contains a default logo for the wallet, which is an Alephium icon\n- `installed`: a boolean that indicates whether the wallet is installed. If the `shouldUseWalletConnect` flag is true, this property is set to false, otherwise it is set to true if the `window` object is defined. \n\nThis code is likely used in a larger project that interacts with a web3 provider and needs to detect the presence of a wallet. The `injected` function provides information about the wallet that can be used to display wallet options to the user or to determine which wallet to use for a particular transaction. For example, the `logos` property could be used to display the Alephium icon next to the wallet name. The `installed` property could be used to determine whether to display a message to the user to install the wallet. Overall, this code provides a simple way to detect the presence of a wallet and provide information about it to the user.",
          "questions": "1. What is the purpose of this code?\n   - This code defines a function called `injected` that returns an object with properties related to a wallet.\n2. What is the license for this code?\n   - This code is licensed under the GNU Lesser General Public License.\n3. What other files or modules does this code depend on?\n   - This code imports `WalletProps` from a file located at `./../wallet`, and imports `isMobile` and `Logos` from files located at `../../utils` and `./../../assets/logos`, respectively."
        },
        {
          "fileName": "walletConnect.tsx",
          "filePath": "packages/web3-react/src/wallets/connectors/walletConnect.tsx",
          "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3-react/src/wallets/connectors/walletConnect.tsx",
          "summary": "This code defines a function called `walletConnect` that returns an object with properties representing a wallet connector. The purpose of this code is to provide a way for users to connect their wallets to the Alephium network. \n\nThe function takes in an object called `_walletOptions` as an argument, but this argument is not used in the function. Instead, the function returns an object with the following properties:\n\n- `id`: A string representing the ID of the wallet connector. In this case, it is set to `'walletConnect'`.\n- `name`: A string representing the name of the wallet connector. In this case, it is set to `'Other Wallets'`.\n- `logos`: An object with properties representing different logos for the wallet connector. The logos are imported from a file called `Logos` located in the `assets` directory. There are five different logos: `default`, `mobile`, `transparent`, `connectorButton`, and `qrCode`. Each logo is a React component that renders an SVG image. The `background` prop is used to determine whether the logo should have a background color or not.\n- `logoBackground`: A string representing the background color of the logo. In this case, it is set to `'var(--ck-brand-walletConnect)'`.\n- `scannable`: A boolean representing whether the wallet connector can be scanned. In this case, it is set to `true`.\n\nThis code is used in the larger Alephium project to provide a standardized way for users to connect their wallets to the network. By defining a set of properties for each wallet connector, the project can ensure that each connector has a consistent look and feel. Other files in the project can import this function and use it to display a list of available wallet connectors to the user. For example:\n\n```\nimport { walletConnect } from 'oxygenium-web3'\n\nconst walletConnectProps = walletConnect()\n// Display walletConnectProps in a list of available wallet connectors\n```",
          "questions": "1. What is the purpose of this code?\n   This code exports a function called `walletConnect` that returns an object with properties related to a wallet integration.\n\n2. What is the `WalletProps` type and where is it defined?\n   The `WalletProps` type is imported from a file located at `./../wallet`. The definition of this type is not shown in this code snippet.\n\n3. What is the significance of the `Logos` import and how is it used in this code?\n   The `Logos` import is used to access different logos related to the wallet integration. These logos are then assigned to the `logos` property of the object returned by the `walletConnect` function."
        }
      ],
      "folders": [],
      "summary": "The code in the `connectors` folder provides a set of functions that return wallet connector configurations for different types of wallets in the Alephium project. These configurations include information such as the wallet's ID, name, logos, and whether it can be scanned (e.g., by a QR code). The functions can be imported and used by other parts of the project to display wallet options to the user or to determine which wallet to use for a particular transaction.\n\nFor example, the `desktopWallet.tsx` file defines a function called `desktopWallet` that returns a `WalletProps` object for the desktop wallet connector. This function can be imported and used by other parts of the project to retrieve the necessary configuration information for the desktop wallet:\n\n```javascript\nimport { desktopWallet } from 'oxygenium-web3'\n\nconst walletConfig = desktopWallet()\nconsole.log(walletConfig) // outputs the desktop wallet connector configuration as a WalletProps object\n```\n\nSimilarly, the `injected.tsx` file defines a function called `injected` that returns an object with properties related to a wallet that is injected into a web3 provider. This function can be used to detect the presence of a wallet and provide information about it to the user:\n\n```javascript\nimport { injected } from 'oxygenium-web3'\n\nconst injectedWallet = injected()\nconsole.log(injectedWallet) // outputs an object with properties related to the injected wallet\n```\n\nLastly, the `walletConnect.tsx` file defines a function called `walletConnect` that returns an object with properties representing a wallet connector. This function can be imported and used by other parts of the project to display a list of available wallet connectors to the user:\n\n```javascript\nimport { walletConnect } from 'oxygenium-web3'\n\nconst walletConnectProps = walletConnect()\n// Display walletConnectProps in a list of available wallet connectors\n```\n\nOverall, the code in the `connectors` folder provides a set of functions that return standardized wallet connector configurations for different types of wallets. These configurations can be used by other parts of the Alephium project to interact with wallets and display wallet options to the user.",
      "questions": ""
    }
  ],
  "summary": "The code in the `wallets` folder of the `oxygenium-web3` project provides a set of functions and interfaces to interact with different types of cryptocurrency wallets. It includes three wallet connectors (`injected`, `walletConnect`, and `desktopWallet`) that can be used to interact with wallets such as MetaMask, Trust Wallet, and Alephium Desktop Wallet.\n\nThe `getWallets` function in `index.ts` returns an array of these wallet connectors, which can be used in other parts of the Alephium project to interact with different types of wallets. For example:\n\n```javascript\nimport { getWallets } from 'oxygenium-web3'\n\nconst wallets = getWallets({})\nconsole.log(wallets) // [injected({}), walletConnect({}), desktopWallet()]\n```\n\nThe `useDefaultWallets.tsx` file provides a function called `useDefaultWallets` that returns an array of `WalletProps` objects, which can be used to display a list of default wallets in a user interface or for testing purposes. Here's an example of how it might be used in a React component:\n\n```javascript\nimport React from 'react'\nimport useDefaultWallets from 'oxygenium-web3'\n\nfunction WalletList() {\n  const wallets = useDefaultWallets()\n\n  return (\n    <ul>\n      {wallets.map(wallet => (\n        <li key={wallet.address}>\n          {wallet.address} - {wallet.balance}\n        </li>\n      ))}\n    </ul>\n  )\n}\n```\n\nThe `wallet.ts` file defines two interfaces, `WalletOptions` and `WalletProps`, which are used to define the options and properties of a wallet component in the Alephium project. These interfaces can be used by developers to create new wallet components and pass in the appropriate options and properties:\n\n```javascript\nimport { WalletOptions, WalletProps } from 'oxygenium-web3'\n\nconst walletOptions: WalletOptions = {\n  appName: 'My App',\n  shimDisconnect: true\n}\n\nconst walletProps: WalletProps = {\n  id: 'my-wallet',\n  name: 'My Wallet',\n  shortName: 'MW',\n  logos: {\n    default: <MyWalletLogo />,\n    transparent: <MyWalletLogoTransparent />,\n    connectorButton: <MyWalletConnectorButton />,\n    qrCode: <MyWalletQRCode />,\n    appIcon: <MyWalletAppIcon />,\n    mobile: <MyWalletMobileLogo />\n  },\n  logoBackground: '#FFFFFF',\n  scannable: true,\n  installed: true,\n  downloadUrls: {\n    windows: 'https://my-wallet.com/windows',\n    mac: 'https://my-wallet.com/mac',\n    linux: 'https://my-wallet.com/linux'\n  }\n}\n```\n\nThe `connectors` subfolder contains functions that return wallet connector configurations for different types of wallets. These configurations can be used by other parts of the Alephium project to interact with wallets and display wallet options to the user. For example, to display a list of available wallet connectors:\n\n```javascript\nimport { walletConnect } from 'oxygenium-web3'\n\nconst walletConnectProps = walletConnect()\n// Display walletConnectProps in a list of available wallet connectors\n```\n\nOverall, the code in the `wallets` folder provides a set of functions and interfaces for interacting with different types of cryptocurrency wallets in the Alephium project. These functions and interfaces can be used by developers to create new wallet components, display wallet options to users, and interact with wallets for various transactions.",
  "questions": ""
}