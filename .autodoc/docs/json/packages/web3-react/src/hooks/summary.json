{
  "folderName": "hooks",
  "folderPath": ".autodoc/docs/json/packages/web3-react/src/hooks",
  "url": "https://github.com/oxygenium-network/oxygenium-web3/.autodoc/docs/json/packages/web3-react/src/hooks",
  "files": [
    {
      "fileName": "useAccount.tsx",
      "filePath": "packages/web3-react/src/hooks/useAccount.tsx",
      "url": "https://github.com/oxygenium-network/oxygenium-web3/packages/web3-react/src/hooks/useAccount.tsx",
      "summary": "This file contains a custom React hook called `useAccount` that is used to connect to an Oxygenium wallet and retrieve the current account. The hook is designed to be used in a React component and takes an optional callback function `onDisconnected` that is called when the wallet is disconnected.\n\nThe hook uses the `useEffect` hook to perform the connection to the wallet when the component is mounted. It first retrieves the `context` object from the `useOxygeniumConnectContext` hook, which contains information about the current network, address group, and key type. It then checks if the current connector is either WalletConnect or Desktop Wallet, and if so, it returns without doing anything.\n\nIf the current connector is not WalletConnect or Desktop Wallet, the hook retrieves the default Oxygenium wallet using the `getDefaultOxygeniumWallet` function from the `@oxygenium/get-extension-wallet` library. It then checks if the current account is already connected and matches the current network, address group, and key type. If so, it returns without doing anything.\n\nIf the current account is not connected or does not match the current network, address group, and key type, the hook calls the `enableIfConnected` function on the Oxygenium wallet to connect to the wallet and enable the account. It passes in the `onDisconnected` callback function if it was provided, as well as the current network, address group, and key type. If the account is successfully enabled, the hook sets the signer provider and account in the `context` object.\n\nFinally, the hook returns an object containing the current account and a boolean indicating whether the account is connected or not.\n\nThis hook can be used in a React component to retrieve the current account and connect to an Oxygenium wallet. For example:\n\n```jsx\nimport { useAccount } from 'oxygenium-web3'\n\nfunction MyComponent() {\n  const { account, isConnected } = useAccount()\n\n  return (\n    <div>\n      {isConnected ? (\n        <p>Connected to account {account}</p>\n      ) : (\n        <p>Not connected to any account</p>\n      )}\n    </div>\n  )\n}\n```",
      "questions": "1. What is the purpose of this code?\n- This code exports a custom hook called `useAccount` that connects to an Oxygenium wallet and returns the current account and connection status.\n\n2. What dependencies are required to use this code?\n- This code requires the `@oxygenium/get-extension-wallet` and `@oxygenium/web3` packages, as well as the `react` library.\n\n3. What license is this code released under?\n- This code is released under the GNU Lesser General Public License, version 3 or later."
    },
    {
      "fileName": "useBalance.tsx",
      "filePath": "packages/web3-react/src/hooks/useBalance.tsx",
      "url": "https://github.com/oxygenium-network/oxygenium-web3/packages/web3-react/src/hooks/useBalance.tsx",
      "summary": "This code defines a custom React hook called `useBalance` that allows a user to retrieve their balance for the Oxygenium cryptocurrency. The hook is part of the Oxygenium Web3 project, which is a library for interacting with the Oxygenium blockchain.\n\nThe hook uses the `useEffect` and `useState` hooks from React to manage state and side effects. It also imports the `Balance` type from the Oxygenium Web3 library and the `useOxygeniumConnectContext` hook from a custom context called `oxygeniumConnect`.\n\nWhen the `useBalance` hook is called, it retrieves the `context` object from the `oxygeniumConnect` context. This context contains information about the user's account and the node provider they are connected to. If this information is available, the hook retrieves the user's balance from the node provider using the `addresses.getAddressesAddressBalance` method. The balance is then stored in the `balance` state variable using the `setBalance` function.\n\nThe hook returns an object containing the user's balance. This object can be used in a React component to display the user's balance on the screen.\n\nHere is an example of how the `useBalance` hook can be used in a React component:\n\n```\nimport { useBalance } from 'oxygenium-web3'\n\nfunction Balance() {\n  const { balance } = useBalance()\n\n  if (!balance) {\n    return <div>Loading...</div>\n  }\n\n  return <div>Your balance is {balance.toString()}</div>\n}\n```\n\nThis component uses the `useBalance` hook to retrieve the user's balance and display it on the screen. If the balance is not available yet, it displays a loading message.",
      "questions": "1. What is the purpose of this code?\n   This code defines a custom hook called `useBalance` that retrieves the balance of a user's Oxygenium account using the `@oxygenium/web3` library and the `useEffect` and `useState` hooks from React.\n\n2. What dependencies does this code have?\n   This code imports the `Balance` type from the `@oxygenium/web3` library and the `useEffect` and `useState` hooks from React. It also imports a custom hook called `useOxygeniumConnectContext` from a context file.\n\n3. What license is this code released under?\n   This code is released under the GNU Lesser General Public License, version 3 or later."
    },
    {
      "fileName": "useConnect.tsx",
      "filePath": "packages/web3-react/src/hooks/useConnect.tsx",
      "url": "https://github.com/oxygenium-network/oxygenium-web3/packages/web3-react/src/hooks/useConnect.tsx",
      "summary": "This code defines a custom hook called `useConnect` that provides functionality for connecting to different wallet providers in the Oxygenium Web3 project. The hook returns an object with `connect` and `disconnect` methods for each supported provider. \n\nThe hook uses the `useOxygeniumConnectContext` hook to access the current wallet connection context. It also imports the `WalletConnectProvider` from the `@oxygenium/walletconnect-provider` package and the `QRCodeModal` from the `@walletconnect/qrcode-modal` package.\n\nThe `useConnect` hook takes an options object as an argument, which is used to configure the wallet connection. The `options` object is passed to the `WalletConnectProvider.init` method when connecting to the WalletConnect provider.\n\nThe hook defines three connection methods: `connectOxygenium`, `wcConnect`, and `desktopWalletConnect`. \n\nThe `connectOxygenium` method connects to the Oxygenium wallet using the `getDefaultOxygeniumWallet` method from the `@oxygenium/get-extension-wallet` package. It then enables the wallet and sets the signer provider and account in the context.\n\nThe `wcConnect` method connects to the WalletConnect provider using the `WalletConnectProvider.init` method. It sets the `projectId`, `networkId`, and `addressGroup` options, and registers a callback for the `onDisconnected` event. When the connection is established, it sets the signer provider and account in the context.\n\nThe `desktopWalletConnect` method is similar to `wcConnect`, but instead of opening a QR code modal, it opens the Oxygenium desktop wallet using a custom URI scheme.\n\nThe hook also defines a `wcDisconnect` method that disconnects from the WalletConnect provider and clears the signer provider and account from the context. \n\nFinally, the hook returns an object with `connect` and `disconnect` methods for each supported provider. The provider is determined by the `connectorId` property in the context. If the `connectorId` is `injected`, the `connect` and `disconnect` methods for the Oxygenium wallet are returned. If the `connectorId` is `walletConnect`, the `connect` and `disconnect` methods for the WalletConnect provider are returned. If the `connectorId` is `desktopWallet`, the `connect` and `disconnect` methods for the desktop wallet are returned. \n\nOverall, this code provides a convenient way to connect to different wallet providers in the Oxygenium Web3 project. It abstracts away the details of connecting to each provider and provides a consistent interface for interacting with them.",
      "questions": "1. What is the purpose of this code?\n- This code provides a hook called `useConnect` that allows a user to connect to the Oxygenium network using various methods, including Oxygenium wallet, WalletConnect, and desktop wallet.\n\n2. What is the role of `getDefaultOxygeniumWallet` and `WalletConnectProvider` in this code?\n- `getDefaultOxygeniumWallet` is used to get the default Oxygenium wallet instance, while `WalletConnectProvider` is used to create a provider for the WalletConnect connection method.\n\n3. What is the significance of `WALLET_CONNECT_PROJECT_ID`?\n- `WALLET_CONNECT_PROJECT_ID` is a project ID used for WalletConnect connections, which is necessary for establishing a connection to the Oxygenium network."
    },
    {
      "fileName": "useFitText.tsx",
      "filePath": "packages/web3-react/src/hooks/useFitText.tsx",
      "url": "https://github.com/oxygenium-network/oxygenium-web3/packages/web3-react/src/hooks/useFitText.tsx",
      "summary": "The `useFitText` function is a custom React hook that resizes text to fit within a container. It is imported from the `oxygenium-web3` project and uses the `useCallback`, `useEffect`, `useLayoutEffect`, `useRef`, and `useState` hooks from the React library. The function takes an options object as an argument, which can include the following properties:\n\n- `logLevel`: A string that specifies the level of logging to use. The default value is `'info'`.\n- `maxFontSize`: A number that specifies the maximum font size to use. The default value is `100`.\n- `minFontSize`: A number that specifies the minimum font size to use. The default value is `20`.\n- `onFinish`: A function that is called when the font size has been adjusted to fit the text.\n- `onStart`: A function that is called when the font size adjustment process starts.\n- `resolution`: A number that specifies the resolution of the font size adjustment. The default value is `5`.\n\nThe function returns an object that contains the `fontSize` and `ref` properties. The `fontSize` property is a number that represents the font size that was used to fit the text. The `ref` property is a reference to the container element that the text is contained within.\n\nThe `useFitText` function uses a `ResizeObserver` to monitor changes to the size of the container element. When the size changes, the function recalculates the font size to fit the text. The function uses a binary search algorithm to adjust the font size until the text fits within the container. The `useIsoLayoutEffect` hook is used to suppress warnings when rendering on the server.\n\nThe `useFitText` function can be used in a larger project to dynamically adjust the font size of text to fit within a container. This can be useful for responsive design, where the size of the container may change depending on the size of the screen or the device being used. An example of how to use the `useFitText` function is shown below:\n\n```jsx\nimport useFitText from 'oxygenium-web3'\n\nfunction MyComponent() {\n  const { fontSize, ref } = useFitText()\n\n  return (\n    <div ref={ref}>\n      <p style={{ fontSize: `${fontSize}px` }}>This text will be resized to fit within the container.</p>\n    </div>\n  )\n}\n```",
      "questions": "1. What is the purpose of this code?\n- This code exports a custom React hook called `useFitText` that resizes text to fit within a container.\n\n2. What are the parameters that can be passed to `useFitText`?\n- The `useFitText` hook accepts an options object with the following optional properties: `logLevel`, `maxFontSize`, `minFontSize`, `onFinish`, `onStart`, and `resolution`.\n\n3. How does `useFitText` determine the appropriate font size for the text?\n- `useFitText` uses a binary search algorithm to adjust the font size based on whether the text overflows the container or not. It also has a `resolution` option to determine how close the font size needs to be to the ideal size before stopping the search."
    },
    {
      "fileName": "useFocusTrap.tsx",
      "filePath": "packages/web3-react/src/hooks/useFocusTrap.tsx",
      "url": "https://github.com/oxygenium-network/oxygenium-web3/packages/web3-react/src/hooks/useFocusTrap.tsx",
      "summary": "This code defines a React component called `FocusTrap` that can be used to trap focus within a specific element. The purpose of this component is to ensure that when a user interacts with a specific part of a web page, such as a modal dialog or a dropdown menu, they cannot accidentally tab out of that element and move focus to another part of the page. This can be especially important for users who rely on keyboard navigation to interact with web content.\n\nThe `FocusTrap` component uses a custom hook called `useFocusTrap` to manage focus trapping behavior. The `useFocusTrap` hook takes no arguments and returns a `ref` object that can be attached to a DOM element. When the `FocusTrap` component is mounted, it calls the `useFocusTrap` hook to get a `ref` to the element it should trap focus within. It then attaches an event listener to that element that listens for the `Tab` key. When the `Tab` key is pressed, the event listener checks whether the currently focused element is the first or last focusable element within the trapped element. If it is, focus is moved to the opposite end of the trapped element, effectively trapping focus within that element.\n\nThe `FocusTrap` component itself is a simple wrapper around the trapped element. It takes a single prop called `children`, which should be the content that should be trapped. When the `FocusTrap` component is mounted, it attaches the `ref` returned by `useFocusTrap` to a `div` element that wraps the `children`. This `div` element is given a `tabIndex` of `0`, which makes it focusable. When the `div` element receives focus, focus is automatically moved to the first focusable element within the trapped element.\n\nOverall, this code provides a simple way to ensure that users cannot accidentally tab out of a specific part of a web page. By wrapping content in a `FocusTrap` component, developers can ensure that users can only interact with that content until they explicitly close or dismiss it.",
      "questions": "1. What is the purpose of this code?\n- This code is a React component that implements a focus trap, which restricts keyboard focus to a specific element or group of elements.\n\n2. What is the significance of the GNU Lesser General Public License?\n- The code is licensed under the GNU Lesser General Public License, which allows for the free distribution and modification of the library, but with certain restrictions and requirements.\n\n3. What are the focusable elements that are included in the focus trap?\n- The focusable elements that are included in the focus trap are links, buttons, textareas, text inputs, radio buttons, checkboxes, and select dropdowns, as long as they are not disabled."
    },
    {
      "fileName": "useIsMounted.tsx",
      "filePath": "packages/web3-react/src/hooks/useIsMounted.tsx",
      "url": "https://github.com/oxygenium-network/oxygenium-web3/packages/web3-react/src/hooks/useIsMounted.tsx",
      "summary": "This code defines a custom React hook called `useIsMounted`. The purpose of this hook is to determine whether a component is currently mounted or not. \n\nThe hook uses the `useState` and `useEffect` hooks from the React library. The `useState` hook initializes a state variable called `mounted` to `false`. The `useEffect` hook is used to update the `mounted` state variable to `true` when the component is mounted. The second argument to `useEffect` is an empty array, which means that the effect will only run once when the component is mounted.\n\nThe `useIsMounted` hook returns the `mounted` state variable, which will be `true` if the component is mounted and `false` otherwise. This can be useful in situations where you need to conditionally render content based on whether a component is mounted or not. For example, you might want to fetch data from an API when a component is mounted, but not when it is unmounted. You could use the `useIsMounted` hook to conditionally fetch the data only when the component is mounted.\n\nHere is an example of how you might use the `useIsMounted` hook in a component:\n\n```\nimport { useEffect } from 'react'\nimport useIsMounted from './useIsMounted'\n\nfunction MyComponent() {\n  const isMounted = useIsMounted()\n\n  useEffect(() => {\n    if (isMounted) {\n      // Fetch data from API\n    }\n  }, [isMounted])\n\n  return (\n    // Render component\n  )\n}\n```\n\nIn this example, the `useEffect` hook will only fetch data from the API if the component is currently mounted. The `isMounted` variable is passed as a dependency to the `useEffect` hook to ensure that the effect only runs when the `isMounted` value changes.",
      "questions": "1. What is the purpose of this code?\n   - This code exports a custom React hook called `useIsMounted` which returns a boolean value indicating whether the component is mounted or not.\n\n2. What are the dependencies of this code?\n   - This code imports two hooks from the `react` library, `useState` and `useEffect`.\n\n3. What license is this code released under?\n   - This code is released under the GNU Lesser General Public License, version 3 or later."
    },
    {
      "fileName": "usePrevious.tsx",
      "filePath": "packages/web3-react/src/hooks/usePrevious.tsx",
      "url": "https://github.com/oxygenium-network/oxygenium-web3/packages/web3-react/src/hooks/usePrevious.tsx",
      "summary": "The code above is a custom React hook called `usePrevious` that allows developers to access the previous value of a given variable. This hook is part of the Oxygenium project and is licensed under the GNU Lesser General Public License.\n\nThe `usePrevious` hook takes two arguments: `value` and `initial`. The `value` argument is the current value of the variable that the developer wants to track, while the `initial` argument is an optional initial value that will be returned if there is no previous value.\n\nThe hook uses the `useRef` and `useEffect` hooks from React to store and update the previous value of the variable. The `useRef` hook creates a mutable object that persists for the lifetime of the component, while the `useEffect` hook is used to update the previous value when the `value` argument changes.\n\nThe `usePrevious` hook works by comparing the current `value` argument to the previous `target` value stored in the `ref` object. If the `value` argument has changed, the hook updates the `previous` value to the previous `target` value and updates the `target` value to the new `value` argument.\n\nThis hook can be useful in scenarios where developers need to track changes to a variable and perform some action based on the previous value. For example, if a developer is building a form and wants to show an error message when a user changes a field value, they can use the `usePrevious` hook to compare the current and previous values of the field and show the error message if the values are different.\n\nHere is an example of how to use the `usePrevious` hook:\n\n```\nimport React, { useState } from 'react'\nimport usePrevious from './usePrevious'\n\nfunction MyComponent() {\n  const [count, setCount] = useState(0)\n  const previousCount = usePrevious(count)\n\n  return (\n    <div>\n      <p>Current count: {count}</p>\n      <p>Previous count: {previousCount}</p>\n      <button onClick={() => setCount(count + 1)}>Increment</button>\n    </div>\n  )\n}\n```\n\nIn the example above, the `usePrevious` hook is used to track changes to the `count` variable and display the current and previous values of the variable. When the user clicks the \"Increment\" button, the `count` variable is updated and the `usePrevious` hook updates the `previousCount` variable to the previous value of `count`.",
      "questions": "1. What is the purpose of this code?\n   - This code exports a custom hook called `usePrevious` that allows a developer to get the previous value of a given variable in a React component.\n\n2. What is the input and output of the `usePrevious` hook?\n   - The `usePrevious` hook takes in two parameters: `value` (the current value of the variable) and `initial` (an optional initial value). It returns the previous value of the variable.\n\n3. What license is this code released under?\n   - This code is released under the GNU Lesser General Public License, version 3 or later."
    },
    {
      "fileName": "useTxStatus.tsx",
      "filePath": "packages/web3-react/src/hooks/useTxStatus.tsx",
      "url": "https://github.com/oxygenium-network/oxygenium-web3/packages/web3-react/src/hooks/useTxStatus.tsx",
      "summary": "The code is a custom React hook that allows a user to subscribe to the status of a transaction on the Oxygenium blockchain. The hook is designed to be used in a React component and takes two parameters: the transaction ID and a callback function that will be called whenever the transaction status changes. \n\nThe hook uses the `@oxygenium/web3` library to interact with the Oxygenium blockchain. It first gets the default Oxygenium wallet using the `getDefaultOxygeniumWallet` function from the `@oxygenium/get-extension-wallet` library. If the wallet object is not initialized, an error is thrown. The `web3.setCurrentNodeProvider` function is then called to set the node provider to the one provided by the Oxygenium wallet.\n\nThe hook then creates a subscription to the transaction status using the `subscribeToTxStatus` function from the `@oxygenium/web3` library. The subscription options are defined in the `subscriptionOptions` object, which includes a polling interval of 3 seconds, a message callback function that updates the transaction status and calls the provided callback function, and an error callback function that logs any errors and unsubscribes from the subscription.\n\nThe hook returns the current transaction status as a state variable, which can be used to render the component based on the current status of the transaction. \n\nHere is an example of how the hook can be used in a React component:\n\n```\nimport { useTxStatus } from './useTxStatus'\n\nfunction MyComponent() {\n  const { txStatus } = useTxStatus('0x123456789abcdef')\n\n  if (txStatus === undefined) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div>\n      <p>Transaction status: {txStatus.type}</p>\n      <p>Transaction hash: {txStatus.hash}</p>\n    </div>\n  )\n}\n```\n\nIn this example, the `useTxStatus` hook is called with a transaction ID of `0x123456789abcdef`. The component renders a loading message if the transaction status is undefined, and otherwise displays the transaction status and hash. The callback function can also be provided to perform additional actions when the transaction status changes.",
      "questions": "1. What is the purpose of this code?\n- This code defines a custom React hook called `useTxStatus` that allows developers to subscribe to transaction status updates on the Oxygenium blockchain.\n\n2. What dependencies does this code rely on?\n- This code relies on several external dependencies, including `@oxygenium/get-extension-wallet`, `@oxygenium/web3`, and `react`.\n\n3. What license is this code released under?\n- This code is released under the GNU Lesser General Public License, version 3 or later."
    }
  ],
  "folders": [],
  "summary": "The `hooks` folder in the `oxygenium-web3` project contains custom React hooks that provide various functionalities related to the Oxygenium blockchain. These hooks can be used in React components to interact with the Oxygenium wallet, retrieve account information, and subscribe to transaction status updates.\n\nFor instance, the `useAccount` hook connects to an Oxygenium wallet and retrieves the current account. It can be used in a React component to display the connected account:\n\n```jsx\nimport { useAccount } from 'oxygenium-web3'\n\nfunction MyComponent() {\n  const { account, isConnected } = useAccount()\n\n  return (\n    <div>\n      {isConnected ? (\n        <p>Connected to account {account}</p>\n      ) : (\n        <p>Not connected to any account</p>\n      )}\n    </div>\n  )\n}\n```\n\nThe `useBalance` hook retrieves the user's balance for the Oxygenium cryptocurrency and can be used to display the balance in a component:\n\n```jsx\nimport { useBalance } from 'oxygenium-web3'\n\nfunction Balance() {\n  const { balance } = useBalance()\n\n  if (!balance) {\n    return <div>Loading...</div>\n  }\n\n  return <div>Your balance is {balance.toString()}</div>\n}\n```\n\nThe `useConnect` hook provides functionality for connecting to different wallet providers and can be used to establish a connection with a specific provider:\n\n```jsx\nimport { useConnect } from 'oxygenium-web3'\n\nfunction ConnectButton() {\n  const { connect } = useConnect()\n\n  return (\n    <button onClick={() => connect()}>Connect to Wallet</button>\n  )\n}\n```\n\nOther hooks in this folder, such as `useFitText`, `useFocusTrap`, `useIsMounted`, `usePrevious`, and `useTxStatus`, provide additional functionalities that can be used in various scenarios within the Oxygenium project. For example, the `useTxStatus` hook can be used to subscribe to the status of a transaction and display it in a component:\n\n```jsx\nimport { useTxStatus } from './useTxStatus'\n\nfunction MyComponent() {\n  const { txStatus } = useTxStatus('0x123456789abcdef')\n\n  if (txStatus === undefined) {\n    return <div>Loading...</div>\n  }\n\n  return (\n    <div>\n      <p>Transaction status: {txStatus.type}</p>\n      <p>Transaction hash: {txStatus.hash}</p>\n    </div>\n  )\n}\n```\n\nOverall, the hooks in this folder provide a convenient way to interact with the Oxygenium blockchain and wallet in a React application. They abstract away the complexities of connecting to the blockchain and provide a simple interface for developers to build user interfaces and interact with the Oxygenium network.",
  "questions": ""
}