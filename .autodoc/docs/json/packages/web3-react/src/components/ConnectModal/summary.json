{
  "folderName": "ConnectModal",
  "folderPath": ".autodoc/docs/json/packages/web3-react/src/components/ConnectModal",
  "url": "https://github.com/oxygenium/oxygenium-web3/.autodoc/docs/json/packages/web3-react/src/components/ConnectModal",
  "files": [
    {
      "fileName": "ConnectUsing.tsx",
      "filePath": "packages/web3-react/src/components/ConnectModal/ConnectUsing.tsx",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3-react/src/components/ConnectModal/ConnectUsing.tsx",
      "summary": "The `ConnectUsing` component is a React functional component that provides a way for users to connect to the Oxygenium network using various methods. It imports `AnimatePresence` and `motion` from the `framer-motion` library, which are used to animate the transition between different connection methods. It also imports `useState` from React, which is used to manage the state of the component.\n\nThe component takes a single prop, `connectorId`, which is a string that represents the ID of the connector to use for the connection. The `supportedConnectors` constant is imported from `./../../constants/supportedConnectors`, which is an array of objects that represent the different connectors that are supported by the Oxygenium network. The `connector` constant is set to the first object in the `supportedConnectors` array that has an `id` property that matches the `connectorId` prop.\n\nThe `hasExtensionInstalled` constant is set to the result of calling the `extensionIsInstalled` function on the `connector` object, if it exists. This function is used to check if the browser extension required for the connection method is installed.\n\nThe `useInjector` constant is set to a boolean value that determines whether to use the injector flow or the QR code flow for the connection. If the connector is not scannable or the extension is installed, the injector flow is used. If the connector ID is `desktopWallet`, the desktop wallet flow is used. Otherwise, the QR code flow is used.\n\nThe `status` state is set to the appropriate value based on the `useInjector` constant and the `connectorId` prop. If the injector flow is used, the `ConnectWithInjector` component is rendered. If the desktop wallet flow is used, the `ConnectWithDesktopWallet` component is rendered. Otherwise, the `ConnectWithWalletConnect` component is rendered.\n\nIf the `connector` constant is falsy, an `Alert` component is rendered with the message \"Connector not found\".\n\nThe `AnimatePresence` component is used to animate the transition between the QR code flow and the injector flow. If the injector flow is used, the `ConnectWithInjector` component is wrapped in a `motion.div` component that is animated using the `contentVariants` object.\n\nThe `ConnectUsing` component is used in other components throughout the Oxygenium Web3 project to provide a consistent way for users to connect to the Oxygenium network using different methods. For example, it is used in the `ConnectWalletModal` component to allow users to connect their wallets to the Oxygenium network.",
      "questions": "1. What is the purpose of this code file?\n- This code file exports a React component called `ConnectUsing` that renders different connection methods based on the `connectorId` prop passed to it.\n\n2. What are the different connection methods available in this code file?\n- The different connection methods available are: `QRCODE`, `INJECTOR`, and `DESKTOPWALLET`.\n- `QRCODE` and `DESKTOPWALLET` are self-explanatory, while `INJECTOR` is a flow that is displayed if the connector cannot be scanned or if the extension required for the connector is not installed.\n\n3. What license is this code file released under?\n- This code file is released under the GNU Lesser General Public License, version 3 or later."
    },
    {
      "fileName": "ConnectWithDesktopWallet.tsx",
      "filePath": "packages/web3-react/src/components/ConnectModal/ConnectWithDesktopWallet.tsx",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3-react/src/components/ConnectModal/ConnectWithDesktopWallet.tsx",
      "summary": "This code defines a React functional component called `ConnectWithDesktopWallet`. The purpose of this component is to connect to a desktop wallet for the Oxygenium blockchain. The component imports several dependencies, including `React`, `useEffect`, and `useState`. It also imports two custom hooks, `useOxygeniumConnectContext` and `useConnect`, from the `oxygeniumConnect` and `hooks` directories, respectively.\n\nThe `useOxygeniumConnectContext` hook provides access to the Oxygenium Connect context, which contains information about the user's wallet, such as the address group, key type, and network ID. The `useConnect` hook is used to initiate the connection to the desktop wallet. It takes an object with the address group, key type, and network ID as arguments.\n\nThe `ConnectWithDesktopWallet` component uses the `useState` hook to define a state variable called `error`, which is initially set to `undefined`. The `useEffect` hook is used to call the `connect` function from the `useConnect` hook when the component mounts. If an error occurs during the connection process, the `setError` function is called to update the `error` state variable with the error message.\n\nFinally, the component returns a `PageContent` component with a `Container` component inside. The `Container` component displays either the `error` message or the text \"Opening desktop wallet...\" depending on whether an error occurred during the connection process.\n\nThis component is likely used in a larger project that involves interacting with the Oxygenium blockchain. It provides a simple way for users to connect their desktop wallets to the project and access their wallet information. Other components in the project may use the information provided by the desktop wallet to perform various blockchain-related tasks, such as sending and receiving transactions.",
      "questions": "1. What is the purpose of this code and what does it do?\n   - This code is a React component that connects to a desktop wallet and displays a message indicating whether the connection was successful or not.\n\n2. What dependencies does this code rely on?\n   - This code relies on several dependencies, including React, the `PageContent` and `Container` components from other files, and the `useOxygeniumConnectContext` and `useConnect` hooks from the `oxygeniumConnect` and `hooks` directories, respectively.\n\n3. What license is this code released under?\n   - This code is released under the GNU Lesser General Public License, version 3 or later."
    },
    {
      "fileName": "ConnectWithWalletConnect.tsx",
      "filePath": "packages/web3-react/src/components/ConnectModal/ConnectWithWalletConnect.tsx",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3-react/src/components/ConnectModal/ConnectWithWalletConnect.tsx",
      "summary": "This code defines a React functional component called `ConnectWithWalletConnect` that is used to connect to a wallet using the WalletConnect protocol. The component is part of the Oxygenium project and is located in the `oxygenium-web3` directory.\n\nThe component imports several modules, including `React`, `useEffect`, `useState`, and custom hooks and contexts from the Oxygenium project. It also defines a boolean variable `_init` that is used to keep track of whether the component has been initialized.\n\nThe `ConnectWithWalletConnect` component renders a `PageContent` component that contains a `Container` component. The `Container` component displays a message indicating that the component is connecting to a wallet using the WalletConnect protocol. If an error occurs during the connection process, the error message is displayed instead.\n\nThe `useEffect` hook is used to connect to the wallet using the `connect` function from the `useConnect` hook. The `useConnect` hook takes an object with three properties: `addressGroup`, `keyType`, and `networkId`. These properties are used to configure the connection to the wallet.\n\nThe `useEffect` hook is only executed once, when the component is mounted. If the connection is successful, the `_init` variable is set to `true` and the error message is cleared. If an error occurs, the error message is displayed in the `Container` component.\n\nThis component is likely used in a larger project to provide users with a way to connect to a wallet using the WalletConnect protocol. The component is designed to be reusable and can be easily integrated into other parts of the project. Developers can customize the `addressGroup`, `keyType`, and `networkId` properties to configure the connection to the wallet.",
      "questions": "1. What is the purpose of this code and how does it fit into the overall oxygenium-web3 project?\n- This code is a React component called `ConnectWithWalletConnect` that handles connecting to a wallet using the WalletConnect protocol. It is likely part of a larger project that involves interacting with the Oxygenium blockchain.\n\n2. What dependencies does this code rely on?\n- This code relies on several dependencies, including `React`, `useEffect`, `useState`, and several custom hooks and components from the `oxygeniumConnect` and `Common` directories.\n\n3. What license is this code released under?\n- This code is released under the GNU Lesser General Public License, version 3 or later."
    },
    {
      "fileName": "index.tsx",
      "filePath": "packages/web3-react/src/components/ConnectModal/index.tsx",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3-react/src/components/ConnectModal/index.tsx",
      "summary": "The `ConnectModal` component is a React functional component that renders a modal window for connecting to the Oxygenium network. It imports several other components and hooks from the `oxygenium-web3` project, including `useEffect`, `useOxygeniumConnectContext`, `Modal`, `Connectors`, `ConnectUsing`, `Profile`, and `useAccount`.\n\nThe `ConnectModal` component takes three optional props: `mode`, `theme`, and `customTheme`. These props are used to set the mode and theme of the modal window, as well as any custom theme properties that may be passed in.\n\nThe `ConnectModal` component uses the `useOxygeniumConnectContext` hook to get the current state of the Oxygenium network connection. It also uses the `useAccount` hook to get the current account information. Based on this information, the component sets the `closeable` prop to `true` and determines whether to show a back button in the modal window.\n\nThe `ConnectModal` component defines an array of `Page` objects that represent the different pages of the modal window. These pages include the `Connectors` page, the `Connect` page, and the `Profile` page. Each page is associated with an `id` and a `content` property that contains the JSX to render the page.\n\nThe `ConnectModal` component defines several `useEffect` hooks that are used to update the state of the Oxygenium network connection, the mode and theme of the modal window, and the custom theme properties. These hooks are called whenever the corresponding prop or state value changes.\n\nFinally, the `ConnectModal` component returns a `Modal` component that renders the modal window. The `Modal` component takes several props, including the `open` prop that determines whether the modal window is visible, the `pages` prop that contains the array of `Page` objects, the `pageId` prop that determines which page to show, the `onClose` prop that is called when the modal window is closed, the `onInfo` prop that is called when the info button is clicked, and the `onBack` prop that is called when the back button is clicked.\n\nOverall, the `ConnectModal` component provides a simple and flexible way to connect to the Oxygenium network and manage the connection state. It can be used in conjunction with other components and hooks from the `oxygenium-web3` project to build more complex applications that interact with the Oxygenium network.",
      "questions": "1. What is the purpose of this code and what does it do?\n- This code defines a React component called `ConnectModal` that renders a modal for connecting to the Oxygenium network using various connectors.\n\n2. What license is this code released under?\n- This code is released under the GNU Lesser General Public License, version 3 or later.\n\n3. What are the props that can be passed to the `ConnectModal` component?\n- The `ConnectModal` component accepts three optional props: `mode`, `theme`, and `customTheme`. These props control the appearance and behavior of the modal."
    }
  ],
  "folders": [
    {
      "folderName": "ConnectWithInjector",
      "folderPath": ".autodoc/docs/json/packages/web3-react/src/components/ConnectModal/ConnectWithInjector",
      "url": "https://github.com/oxygenium/oxygenium-web3/.autodoc/docs/json/packages/web3-react/src/components/ConnectModal/ConnectWithInjector",
      "files": [
        {
          "fileName": "index.tsx",
          "filePath": "packages/web3-react/src/components/ConnectModal/ConnectWithInjector/index.tsx",
          "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3-react/src/components/ConnectModal/ConnectWithInjector/index.tsx",
          "summary": "The `ConnectWithInjector` component in the `oxygenium-web3` project is responsible for managing the connection between the Oxygenium wallet and supported browser extensions (also known as injectors). The component handles various connection states, such as connecting, connected, expiring, failed, rejected, not connected, and unavailable.\n\nThe component accepts three props: `connectorId`, `switchConnectMethod`, and `forceState`. The `connectorId` is used to identify the specific browser extension to connect with. The `switchConnectMethod` function is called when the user wants to switch to a different connection method, such as scanning a QR code. The optional `forceState` prop can be used to force the component into a specific state for testing purposes.\n\nThe component uses the `useOxygeniumConnectContext` and `useConnect` hooks to manage the connection with the Oxygenium wallet. It also uses the `supportedConnectors` constant to filter the list of supported connectors based on the provided `connectorId`.\n\nThe component renders different content based on the current connection state. For example, when the state is `connecting`, it displays a spinner animation with the logo of the selected connector. If the state is `failed` or `rejected`, it shows an error message and a retry button. If the state is `unavailable`, it suggests installing the required browser extension.\n\nHere's an example of how to use the `ConnectWithInjector` component:\n\n```jsx\n<ConnectWithInjector\n  connectorId=\"metamask\"\n  switchConnectMethod={switchConnectMethod}\n/>\n```\n\nThis will render the component with the MetaMask connector and handle the connection process accordingly.",
          "questions": "1. **Question:** What is the purpose of the `ConnectWithInjector` component and how does it work with different connector states?\n   **Answer:** The `ConnectWithInjector` component is responsible for handling the connection process with different wallet connectors. It manages various states like connecting, connected, expiring, failed, rejected, not connected, and unavailable, and updates the UI accordingly based on the current state.\n\n2. **Question:** How does the `runConnect` function work and when is it called?\n   **Answer:** The `runConnect` function is responsible for initiating the connection process with the wallet connector. It checks if the extension is installed and then calls the `connect` function from the `useConnect` hook. If the connection is successful, it updates the status to connected and closes the context. The function is called within a `useEffect` hook with a 600ms timeout to give the user time to see the UI before opening the extension.\n\n3. **Question:** How does the code handle the countdown timer for the expiring state?\n   **Answer:** The code has a commented-out section for handling the countdown timer for the expiring state. It initializes the `expiryTimer` state with a default value of 9 and uses a `useEffect` hook to update the timer. However, the timer functionality is currently not being used, and the countdown timer is not displayed in the UI."
        },
        {
          "fileName": "styles.ts",
          "filePath": "packages/web3-react/src/components/ConnectModal/ConnectWithInjector/styles.ts",
          "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3-react/src/components/ConnectModal/ConnectWithInjector/styles.ts",
          "summary": "This file contains styled components for a loading spinner and retry button that are used in the Oxygenium web3 project. The `Content` component is a container for the modal content and has a flexbox layout with a vertical column direction and a gap of 6px between its child elements. It also has a relative position and spans the full width of its parent container. The `Container` component is a container for the loading spinner and has a motion animation applied to it. The `ConnectingContainer` component is a container for the loading spinner and has a fixed height of 120px and is centered horizontally and vertically within its parent container. The `ConnectingAnimation` component is the actual loading spinner and has two animation keyframes applied to it: `shakeKeyframes` and `outlineKeyframes`. The `shakeKeyframes` animation causes the spinner to shake back and forth horizontally, while the `outlineKeyframes` animation causes a red outline to appear around the spinner and then fade out. The `RetryButton` component is a button that appears when there is an error and allows the user to retry the action. It has a fixed position in the bottom right corner of its parent container and has a circular shape with a 32px diameter. The `RetryIconContainer` component is a container for the retry button icon and has a conic gradient applied to it. \n\nThese components are used throughout the Oxygenium web3 project to provide visual feedback to the user during loading and error states. For example, the `ConnectingContainer` component may be used when the user is waiting for a transaction to be confirmed on the blockchain, while the `RetryButton` component may be used when there is an error fetching data from a remote server. The use of styled components allows for easy customization of the visual appearance of these components, making it simple to match the design of the loading spinner and retry button to the overall look and feel of the Oxygenium web3 project.",
          "questions": "1. What is the purpose of this code file?\n- This code file contains styled components for a connecting animation and retry button for a modal.\n\n2. What is the license for this library?\n- The library is licensed under the GNU Lesser General Public License, version 3 or later.\n\n3. What is the purpose of the `ConnectingAnimation` component's props `$shake` and `$circle`?\n- The `$shake` prop is used to trigger a shaking animation for the connecting animation, while the `$circle` prop is used to change the shape of the animation from a square to a circle."
        }
      ],
      "folders": [
        {
          "folderName": "CircleSpinner",
          "folderPath": ".autodoc/docs/json/packages/web3-react/src/components/ConnectModal/ConnectWithInjector/CircleSpinner",
          "url": "https://github.com/oxygenium/oxygenium-web3/.autodoc/docs/json/packages/web3-react/src/components/ConnectModal/ConnectWithInjector/CircleSpinner",
          "files": [
            {
              "fileName": "index.tsx",
              "filePath": "packages/web3-react/src/components/ConnectModal/ConnectWithInjector/CircleSpinner/index.tsx",
              "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3-react/src/components/ConnectModal/ConnectWithInjector/CircleSpinner/index.tsx",
              "summary": "The `CircleSpinner` component is a React component that renders a circular spinner animation with an optional logo. It is used to indicate that a process is running or loading, such as when connecting to a server or fetching data. \n\nThe component takes in several props, including `logo`, `smallLogo`, `connecting`, `unavailable`, and `countdown`. The `logo` prop is used to pass in a custom logo to be displayed in the center of the spinner. The `smallLogo` prop is a boolean that determines whether the logo should be smaller. The `connecting` prop is a boolean that determines whether the spinner should be displayed. The `unavailable` prop is a boolean that determines whether the spinner should have a rounded border or not. The `countdown` prop is a boolean that determines whether the spinner should have a countdown animation.\n\nThe spinner animation is created using SVG and Framer Motion. The spinner consists of a circular path that is animated to rotate around the center of the spinner. The `AnimatePresence` component is used to animate the spinner in and out of the DOM. When the `connecting` prop is true, the spinner is displayed with a fade-in animation. When the `countdown` prop is true, the spinner is displayed with a countdown animation that fades out after a short duration.\n\nThe `CircleSpinner` component is used throughout the Oxygenium Web3 project to indicate loading or connecting states. It can be used in conjunction with other components to create a more complex loading or connecting UI. For example, it can be used in a modal or overlay to indicate that a process is running in the background. \n\nExample usage:\n\n```jsx\nimport CircleSpinner from 'oxygenium-web3/components/CircleSpinner'\n\nfunction MyComponent() {\n  return (\n    <div>\n      <CircleSpinner connecting />\n      <p>Loading...</p>\n    </div>\n  )\n}\n```",
              "questions": "1. What is the purpose of this code and what does it do?\n- This code exports a React component called `CircleSpinner` that renders a circular spinner animation with an optional logo and countdown timer.\n\n2. What dependencies does this code rely on?\n- This code imports several components from a file located at `./styles` and the `AnimatePresence` component from the `framer-motion` library.\n\n3. What license is this code released under?\n- This code is released under the GNU Lesser General Public License, version 3 or later."
            },
            {
              "fileName": "styles.ts",
              "filePath": "packages/web3-react/src/components/ConnectModal/ConnectWithInjector/CircleSpinner/styles.ts",
              "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3-react/src/components/ConnectModal/ConnectWithInjector/CircleSpinner/styles.ts",
              "summary": "This file contains styled components for the Oxygenium web3 project. The purpose of this code is to define the styles for the logo and spinner components used in the project. \n\nThe LogoContainer component is a container for the logo and spinner components. It is a motion div with a fixed width and height, and a z-index of 4. The Logo component is a motion div that is positioned absolutely within the LogoContainer. It has a border-radius of 50px, a background color of var(--ck-body-background), and is centered within the LogoContainer. The SpinnerContainer component is also a motion div that is positioned absolutely within the LogoContainer. The ExpiringSpinner and Spinner components are both motion divs that are positioned absolutely within the SpinnerContainer. \n\nThe ExpiringSpinner component is a spinner that has two halves that rotate in opposite directions. It is positioned within the SpinnerContainer and has a background color of var(--ck-body-background). The Spinner component is a simple spinner that rotates continuously. It is also positioned within the SpinnerContainer. \n\nThese components can be used in the larger Oxygenium web3 project to display the logo and spinner animations. For example, the LogoContainer component can be used as a wrapper for the Logo and Spinner components in a loading screen or splash page. The Spinner component can be used to indicate that a process is in progress, while the ExpiringSpinner component can be used to indicate that a process is about to expire. \n\nOverall, this code provides a set of reusable styled components that can be used throughout the Oxygenium web3 project to create a consistent and visually appealing user interface.",
              "questions": "1. What is the purpose of this code?\n- This code defines styled components for a logo and spinner in a web3 project called Oxygenium.\n\n2. What is the license for this code?\n- This code is licensed under the GNU Lesser General Public License version 3 or later.\n\n3. What are the dependencies for this code?\n- This code depends on styled-components and framer-motion libraries."
            }
          ],
          "folders": [],
          "summary": "The `CircleSpinner` component, located in the `index.tsx` file, is a crucial part of the Oxygenium Web3 project as it provides a visual indication of loading or connecting states. It is a React component that renders a circular spinner animation with an optional logo. The component accepts several props, such as `logo`, `smallLogo`, `connecting`, `unavailable`, and `countdown`, which allow customization of the spinner's appearance and behavior.\n\nThe spinner animation is created using SVG and Framer Motion, with the `AnimatePresence` component animating the spinner in and out of the DOM. Depending on the provided props, the spinner can have different animations, such as a fade-in animation when `connecting` is true or a countdown animation when `countdown` is true.\n\nIn the `styles.ts` file, you'll find styled components for the logo and spinner, which define the appearance of these elements. The `LogoContainer` component acts as a wrapper for the logo and spinner components, while the `ExpiringSpinner` and `Spinner` components represent different spinner animations.\n\nThe `CircleSpinner` component can be used in various parts of the Oxygenium Web3 project to indicate loading or connecting states. For instance, it can be combined with other components to create a more complex loading or connecting UI, such as in a modal or overlay to indicate a background process.\n\nHere's an example of how the `CircleSpinner` component might be used:\n\n```jsx\nimport CircleSpinner from 'oxygenium-web3/components/CircleSpinner'\n\nfunction MyComponent() {\n  return (\n    <div>\n      <CircleSpinner connecting />\n      <p>Loading...</p>\n    </div>\n  )\n}\n```\n\nIn this example, the `CircleSpinner` component is used alongside a paragraph element to display a loading message. The spinner will be visible and animated when the `connecting` prop is true. This component can be easily integrated into various parts of the Oxygenium Web3 project, providing a consistent and visually appealing user interface for loading and connecting states.",
          "questions": ""
        }
      ],
      "summary": "The `ConnectWithInjector` component, located in the `index.tsx` file, is responsible for managing the connection between the Oxygenium wallet and supported browser extensions (injectors). It handles various connection states and renders different content based on the current state. For example, when connecting, it displays a spinner animation with the logo of the selected connector. If the state is `failed` or `rejected`, it shows an error message and a retry button. If the state is `unavailable`, it suggests installing the required browser extension.\n\nHere's an example of how to use the `ConnectWithInjector` component:\n\n```jsx\n<ConnectWithInjector\n  connectorId=\"metamask\"\n  switchConnectMethod={switchConnectMethod}\n/>\n```\n\nThis will render the component with the MetaMask connector and handle the connection process accordingly.\n\nThe `styles.ts` file contains styled components for a loading spinner and retry button that are used in the Oxygenium web3 project. These components provide visual feedback to the user during loading and error states. The use of styled components allows for easy customization of the visual appearance of these components, making it simple to match the design of the loading spinner and retry button to the overall look and feel of the Oxygenium web3 project.\n\nThe `CircleSpinner` component, located in the `CircleSpinner` subfolder, is a crucial part of the Oxygenium Web3 project as it provides a visual indication of loading or connecting states. It is a React component that renders a circular spinner animation with an optional logo. The spinner animation is created using SVG and Framer Motion, with the `AnimatePresence` component animating the spinner in and out of the DOM.\n\nHere's an example of how the `CircleSpinner` component might be used:\n\n```jsx\nimport CircleSpinner from 'oxygenium-web3/components/CircleSpinner'\n\nfunction MyComponent() {\n  return (\n    <div>\n      <CircleSpinner connecting />\n      <p>Loading...</p>\n    </div>\n  )\n}\n```\n\nIn this example, the `CircleSpinner` component is used alongside a paragraph element to display a loading message. The spinner will be visible and animated when the `connecting` prop is true. This component can be easily integrated into various parts of the Oxygenium Web3 project, providing a consistent and visually appealing user interface for loading and connecting states.",
      "questions": ""
    }
  ],
  "summary": "The `ConnectModal` folder contains components that handle connecting to the Oxygenium network using various methods, such as browser extensions (injectors), desktop wallets, and WalletConnect protocol. These components are designed to be reusable and can be easily integrated into other parts of the Oxygenium Web3 project.\n\nFor example, the `ConnectUsing` component provides a consistent way for users to connect to the Oxygenium network using different methods. It can be used in the `ConnectWalletModal` component to allow users to connect their wallets to the Oxygenium network:\n\n```jsx\nimport ConnectUsing from 'oxygenium-web3/components/ConnectModal/ConnectUsing'\n\nfunction MyComponent() {\n  return (\n    <div>\n      <ConnectUsing connectorId=\"metamask\" />\n    </div>\n  )\n}\n```\n\nIn this example, the `ConnectUsing` component is used with the MetaMask connector to handle the connection process.\n\nThe `ConnectWithDesktopWallet` component allows users to connect their desktop wallets to the Oxygenium blockchain. It provides a simple way for users to access their wallet information and perform various blockchain-related tasks, such as sending and receiving transactions:\n\n```jsx\nimport ConnectWithDesktopWallet from 'oxygenium-web3/components/ConnectModal/ConnectWithDesktopWallet'\n\nfunction MyComponent() {\n  return (\n    <div>\n      <ConnectWithDesktopWallet />\n    </div>\n  )\n}\n```\n\nThe `ConnectWithWalletConnect` component provides users with a way to connect to a wallet using the WalletConnect protocol. Developers can customize the `addressGroup`, `keyType`, and `networkId` properties to configure the connection to the wallet:\n\n```jsx\nimport ConnectWithWalletConnect from 'oxygenium-web3/components/ConnectModal/ConnectWithWalletConnect'\n\nfunction MyComponent() {\n  return (\n    <div>\n      <ConnectWithWalletConnect />\n    </div>\n  )\n}\n```\n\nThe `ConnectWithInjector` component, located in the `ConnectWithInjector` subfolder, manages the connection between the Oxygenium wallet and supported browser extensions (injectors). It handles various connection states and renders different content based on the current state:\n\n```jsx\nimport ConnectWithInjector from 'oxygenium-web3/components/ConnectModal/ConnectWithInjector'\n\nfunction MyComponent() {\n  return (\n    <div>\n      <ConnectWithInjector connectorId=\"metamask\" />\n    </div>\n  )\n}\n```\n\nIn this example, the `ConnectWithInjector` component is used with the MetaMask connector to handle the connection process.\n\nOverall, the components in the `ConnectModal` folder provide a simple and flexible way to connect to the Oxygenium network and manage the connection state. They can be used in conjunction with other components and hooks from the `oxygenium-web3` project to build more complex applications that interact with the Oxygenium network.",
  "questions": ""
}