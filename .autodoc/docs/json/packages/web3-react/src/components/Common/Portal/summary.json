{
  "folderName": "Portal",
  "folderPath": ".autodoc/docs/json/packages/web3-react/src/components/Common/Portal",
  "url": "https://github.com/oxygenium/oxygenium-web3/.autodoc/docs/json/packages/web3-react/src/components/Common/Portal",
  "files": [
    {
      "fileName": "index.tsx",
      "filePath": "packages/web3-react/src/components/Common/Portal/index.tsx",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3-react/src/components/Common/Portal/index.tsx",
      "summary": "The `Portal` component in the `oxygenium-web3` project is a React component that allows rendering of child components outside of the parent component's DOM hierarchy. This is useful when a component needs to be rendered at a specific location in the DOM, such as a modal or a tooltip.\n\nThe `Portal` component uses the `useEffect` hook to check if the specified selector exists in the DOM. If it does, the component is mounted to the existing element. If it does not exist, a new element is created and mounted to the body of the document. The `useState` hook is used to keep track of whether the component is mounted or not.\n\nThe `createPortal` function from the `react-dom` library is used to render the child components into the mounted element. This function takes two arguments: the child components to be rendered and the DOM element to render them into.\n\nThe `Portal` component takes two props: `selector` and `children`. The `selector` prop is used to specify the ID of the element to render the child components into. If no ID is specified, a default ID of `__ALEPHIUMCONNECT__` is used. The `children` prop is used to specify the child components to be rendered.\n\nHere is an example of how the `Portal` component can be used:\n\n```\nimport Portal from './Portal'\n\nconst App = () => {\n  return (\n    <div>\n      <h1>My App</h1>\n      <Portal selector=\"#modal\">\n        <div>\n          <h2>Modal</h2>\n          <p>This is a modal.</p>\n        </div>\n      </Portal>\n    </div>\n  )\n}\n```\n\nIn this example, the `Portal` component is used to render a modal outside of the parent component's DOM hierarchy. The `selector` prop is set to `#modal`, which specifies that the child components should be rendered into an element with an ID of `modal`. If no such element exists, a new element with an ID of `modal` is created and mounted to the body of the document. The `children` prop specifies the child components to be rendered into the `modal` element.",
      "questions": "1. What is the purpose of this code and how is it used in the Alephium project?\n- This code defines a React component called `Portal` that creates a portal to render React components into a DOM element specified by a selector. It is used in the Alephium project to render certain components outside of the normal React component tree.\n\n2. What are the props that can be passed to the `Portal` component?\n- The `Portal` component accepts an object of props, which can include a `selector` string specifying the DOM element to render the portal into, and any other props that can be passed to a React component.\n\n3. What is the license for this code and what are the terms of use?\n- This code is licensed under the GNU Lesser General Public License, version 3 or later. This means that it is free software that can be redistributed and modified, but comes with no warranty and must be used in accordance with the terms of the license."
    }
  ],
  "folders": [],
  "summary": "The `Portal` component in the `oxygenium-web3` project is a useful utility for rendering child components outside of their parent component's DOM hierarchy. This is particularly helpful when you need to render components like modals or tooltips at specific locations in the DOM.\n\nThe component utilizes the `useEffect` hook to check if the specified selector exists in the DOM. If it does, the component is mounted to the existing element. If it does not exist, a new element is created and mounted to the document body. The `useState` hook is used to keep track of the component's mounted state.\n\nThe `createPortal` function from the `react-dom` library is employed to render the child components into the mounted element. This function accepts two arguments: the child components to be rendered and the DOM element to render them into.\n\nThe `Portal` component takes two props: `selector` and `children`. The `selector` prop is used to specify the ID of the element to render the child components into. If no ID is specified, a default ID of `__ALEPHIUMCONNECT__` is used. The `children` prop is used to specify the child components to be rendered.\n\nHere's an example of how the `Portal` component can be used:\n\n```javascript\nimport Portal from './Portal'\n\nconst App = () => {\n  return (\n    <div>\n      <h1>My App</h1>\n      <Portal selector=\"#modal\">\n        <div>\n          <h2>Modal</h2>\n          <p>This is a modal.</p>\n        </div>\n      </Portal>\n    </div>\n  )\n}\n```\n\nIn this example, the `Portal` component is used to render a modal outside of the parent component's DOM hierarchy. The `selector` prop is set to `#modal`, which specifies that the child components should be rendered into an element with an ID of `modal`. If no such element exists, a new element with an ID of `modal` is created and mounted to the body of the document. The `children` prop specifies the child components to be rendered into the `modal` element.\n\nIn the larger project, the `Portal` component can be utilized to handle rendering of components that need to be displayed outside of their parent's DOM hierarchy, ensuring proper positioning and layering of elements like modals, tooltips, and dropdown menus.",
  "questions": ""
}