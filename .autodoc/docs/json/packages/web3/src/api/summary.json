{
  "folderName": "api",
  "folderPath": ".autodoc/docs/json/packages/web3/src/api",
  "url": "https://github.com/oxygenium-network/oxygenium-web3/.autodoc/docs/json/packages/web3/src/api",
  "files": [
    {
      "fileName": "explorer-provider.ts",
      "filePath": "packages/web3/src/api/explorer-provider.ts",
      "url": "https://github.com/oxygenium-network/oxygenium-web3/packages/web3/src/api/explorer-provider.ts",
      "summary": "This code defines a class called `ExplorerProvider` that acts as a wrapper around an instance of the `ExplorerApi` class. The `ExplorerApi` class is imported from another file in the same directory, along with some utility functions. The `ExplorerProvider` class provides a simplified interface for interacting with the Oxygenium blockchain explorer API.\n\nThe `ExplorerProvider` constructor takes three optional parameters: `baseUrl`, `apiKey`, and `customFetch`. If `baseUrl` is provided, a new instance of `ExplorerApi` is created with the specified base URL, API key, and custom fetch function. If a `Provider` object is provided instead, the `ExplorerProvider` instance is created as a copy of the provided object. If an `ApiRequestHandler` function is provided, the `ExplorerProvider` instance is created with a base URL of `https://1.2.3.4:0` and all requests are forwarded to the provided handler.\n\nThe `ExplorerProvider` class has several properties that correspond to different endpoints of the Oxygenium blockchain explorer API, such as `blocks`, `transactions`, `addresses`, `infos`, `mempool`, `tokens`, `charts`, `contracts`, and `contractEvents`. Each of these properties is an object that contains methods for interacting with the corresponding API endpoint.\n\nThe `ExplorerProvider` class also has a `request` method that takes an `ApiRequestArguments` object and returns a Promise that resolves to the response from the API. This method is used internally by the other methods of the class, but can also be used directly to make custom requests to the API.\n\nFinally, the `ExplorerProvider` class has two static methods: `Proxy` and `Remote`. The `Proxy` method takes an `ExplorerProvider` instance and returns a new instance that is a copy of the original instance, but with all properties set to read-only. This can be used to prevent the original instance from being modified. The `Remote` method takes an `ApiRequestHandler` function and returns a new `ExplorerProvider` instance that forwards all requests to the provided handler.\n\nOverall, this code provides a convenient and flexible way to interact with the Oxygenium blockchain explorer API in a TypeScript project. By using the `ExplorerProvider` class, developers can easily make requests to different API endpoints and handle responses in a type-safe manner.",
      "questions": "1. What is the purpose of this code and what does it do?\n   - This code defines a class called `ExplorerProvider` that provides access to various APIs related to the Oxygenium blockchain. It also includes a function called `initializeExplorerApi` that initializes an instance of the `ExplorerApi` class with a given base URL and API key.\n\n2. What is the license for this code and where can I find more information about it?\n   - This code is licensed under the GNU Lesser General Public License, version 3 or later. More information about this license can be found at <http://www.gnu.org/licenses/>.\n\n3. What are the parameters for the `ExplorerProvider` constructor and how are they used?\n   - The `ExplorerProvider` constructor can take a base URL, API key, and custom fetch function as parameters. It can also take an instance of `ExplorerProvider` or `ApiRequestHandler` as a single parameter. These parameters are used to initialize an instance of the `ExplorerApi` class and set up the various APIs that the `ExplorerProvider` class provides access to."
    },
    {
      "fileName": "index.ts",
      "filePath": "packages/web3/src/api/index.ts",
      "url": "https://github.com/oxygenium-network/oxygenium-web3/packages/web3/src/api/index.ts",
      "summary": "This code exports various modules and functions from the oxygenium-web3 project. The purpose of this file is to make these modules and functions available for use in other parts of the project or in external projects that depend on oxygenium-web3.\n\nThe `export` statements at the beginning of the file allow other files to import these modules and functions using the `import` statement. For example, if another file in the project needs to use the `node` module, it can import it like this:\n\n```\nimport { node } from 'oxygenium-web3'\n```\n\nThis will give the file access to all the functions and variables exported from the `api-oxygenium` module.\n\nSimilarly, the `export * from` statements allow other files to import all the exported modules and functions from this file using a single import statement. For example, if another file needs to use all the modules and functions exported from this file, it can import them like this:\n\n```\nimport * as oxygeniumWeb3 from 'oxygenium-web3'\n```\n\nThis will give the file access to all the exported modules and functions, which can be accessed using the `oxygeniumWeb3` object.\n\nOverall, this file serves as a central point for exporting all the important modules and functions from the oxygenium-web3 project, making them easily accessible for use in other parts of the project or in external projects that depend on oxygenium-web3.",
      "questions": "1. What is the purpose of this code file?\n- This code file exports various modules related to Oxygenium web3, including node and explorer providers, APIs, types, and utilities.\n\n2. What license is this code file released under?\n- This code file is released under the GNU Lesser General Public License, version 3 or later.\n\n3. What other files or modules does this code file depend on?\n- This code file depends on other modules within the `oxygenium-web3` project, including `node-provider`, `explorer-provider`, `api-oxygenium`, `api-explorer`, `types`, and `utils`."
    },
    {
      "fileName": "node-provider.ts",
      "filePath": "packages/web3/src/api/node-provider.ts",
      "url": "https://github.com/oxygenium-network/oxygenium-web3/packages/web3/src/api/node-provider.ts",
      "summary": "This file contains the implementation of a NodeProvider class that serves as a wrapper around the Oxygenium node API. The NodeProvider class provides a convenient way to interact with the Oxygenium blockchain by exposing methods that correspond to various API endpoints. \n\nThe NodeProvider class is initialized with a base URL for the Oxygenium node API, an optional API key, and an optional customFetch function. The class then creates an instance of the NodeApi class, which is responsible for making HTTP requests to the Oxygenium node API. \n\nThe NodeProvider class exposes methods that correspond to various API endpoints, such as wallets, infos, blockflow, addresses, transactions, mempool, contracts, multisig, utils, miners, and events. These methods are implemented by forwarding requests to the corresponding methods of the underlying NodeApi instance. \n\nThe NodeProvider class also provides a request method that can be used to make arbitrary API requests. This method takes an ApiRequestArguments object as an argument and returns a Promise that resolves to the response from the API. \n\nThe NodeProvider class also provides two static methods, Proxy and Remote, that can be used to create instances of the NodeProvider class that forward requests to another NodeProvider instance or to a custom API request handler, respectively. \n\nFinally, the NodeProvider class provides two utility methods, fetchStdTokenMetaData and guessStdInterfaceId, that can be used to fetch metadata for standard tokens and to guess the interface ID of a token, respectively. These methods are implemented by making requests to the contracts endpoint of the Oxygenium node API. \n\nOverall, the NodeProvider class provides a convenient and flexible way to interact with the Oxygenium blockchain through the Oxygenium node API.",
      "questions": "1. What is the purpose of this code file?\n- This code file defines a NodeProvider class that acts as a proxy for interacting with an Oxygenium node API.\n\n2. What is the license for this code?\n- This code is licensed under the GNU Lesser General Public License version 3 or later.\n\n3. What is the purpose of the `fetchStdTokenMetaData` and `guessStdInterfaceId` methods?\n- These methods are used to fetch metadata for a standard token and to guess the interface ID for a standard token, respectively."
    },
    {
      "fileName": "types.ts",
      "filePath": "packages/web3/src/api/types.ts",
      "url": "https://github.com/oxygenium-network/oxygenium-web3/packages/web3/src/api/types.ts",
      "summary": "This file contains utility functions and type definitions for interacting with the Oxygenium blockchain through its web3 API. The file defines several functions for converting between different data types used in the API and the corresponding JavaScript types. It also defines functions for parsing API responses and converting them into JavaScript objects.\n\nThe file defines several type aliases, including `Number256`, which represents a 256-bit integer, and `Val`, which represents a value that can be passed to or returned from an API call. The `NamedVals` type is a record of named `Val` values.\n\nThe `Token` interface represents a token on the Oxygenium blockchain, with an `id` string and an `amount` of `Number256` type. The file defines functions for converting between `Token` objects and the corresponding `node.Token` objects used in the API.\n\nThe file also defines functions for converting between JavaScript boolean values and the `Bool` type used in the API, as well as between JavaScript strings and the `ByteVec` and `Address` types used in the API.\n\nThe `toApiArray` function converts a JavaScript array to an `Array` type used in the API, with the specified base type and dimensions. The `fromApiArray` function converts an `Array` type from the API to a JavaScript array.\n\nThe `fromApiVals` function parses an array of `node.Val` objects returned from an API call, using the specified names and types to create a `NamedVals` object. The `fromApiVal` function converts a single `node.Val` object to a JavaScript value of the specified type.\n\nThe file also defines utility functions for forwarding API requests to a handler function, and for making API requests using a provider object and an `ApiRequestArguments` object.\n\nFinally, the file defines the `TokenMetaData` interface, which represents metadata for a token on the Oxygenium blockchain, including its name, symbol, decimals, and total supply.",
      "questions": "1. What is the purpose of this file in the oxygenium-web3 project?\n- This file contains utility functions for converting between different data types used in the project and the corresponding types used in the Oxygenium API.\n\n2. What is the license for this library?\n- The library is licensed under the GNU Lesser General Public License version 3 or later.\n\n3. What is the format of the TokenMetaData interface?\n- The TokenMetaData interface has four properties: name (string), symbol (string), decimals (number), and totalSupply (Number256)."
    },
    {
      "fileName": "utils.ts",
      "filePath": "packages/web3/src/api/utils.ts",
      "url": "https://github.com/oxygenium-network/oxygenium-web3/packages/web3/src/api/utils.ts",
      "summary": "This file contains utility functions for making HTTP requests to an API and handling rate limiting and retries. The functions are designed to be used in the larger Oxygenium project, which likely involves interacting with an external API.\n\nThe `convertHttpResponse` function takes an HTTP response object and returns the data from the response. If the response contains an error, it throws an error with the error detail message.\n\nThe `retryFetch` function takes the same parameters as the built-in `fetch` function and attempts to make a request. If the response status is 429 (Too Many Requests), the function waits for a certain amount of time and retries the request up to a certain number of times. This is useful for handling rate limiting from the API. The function returns a promise that resolves to the response object.\n\nThe `throttledFetch` function takes a rate limit in requests per second and returns a custom `fetch` function that is rate-limited and retries requests as necessary. The function uses the `RateLimit` class from the `async-sema` library to limit the rate of requests. The returned function has the same parameters as the built-in `fetch` function and returns a promise that resolves to the response object.\n\nThe constants `RETRY_LIMIT_WHEN_429`, `DEFAULT_RATE_LIMIT`, and `DEFAULT_THROTTLE_FETCH` are also defined in this file. `RETRY_LIMIT_WHEN_429` is the maximum number of times `retryFetch` will retry a request when it receives a 429 response. `DEFAULT_RATE_LIMIT` is the default rate limit used by `throttledFetch`. `DEFAULT_THROTTLE_FETCH` is the default `fetch` function that is rate-limited and retries requests, with a rate limit of `DEFAULT_RATE_LIMIT` requests per second.\n\nOverall, these functions provide a convenient way to make HTTP requests to an API while handling rate limiting and retries. They can be used in the larger Oxygenium project to interact with an external API in a reliable and efficient manner. Here is an example of how `throttledFetch` might be used:\n\n```\nconst fetch = throttledFetch(5) // limit to 5 requests per second\nconst response = await fetch('https://api.example.com/data')\nconst data = await convertHttpResponse(response)\nconsole.log(data)\n```",
      "questions": "1. What is the purpose of this code file?\n- This code file contains functions and constants related to making HTTP requests with rate limiting and retry functionality.\n\n2. What is the purpose of the `convertHttpResponse` function?\n- The `convertHttpResponse` function takes an HTTP response object and returns its data property if there is no error, or throws an error with the detail property of the error object if there is one.\n\n3. What is the default rate limit for the `throttledFetch` function?\n- The default rate limit for the `throttledFetch` function is 3 requests per second."
    }
  ],
  "folders": [],
  "summary": "The `.autodoc/docs/json/packages/web3/src/api` folder contains the core implementation of the `oxygenium-web3` project, which provides a convenient and flexible way to interact with the Oxygenium blockchain through its web3 API. The folder consists of several TypeScript files that define classes, utility functions, and types for interacting with the Oxygenium blockchain explorer API and the Oxygenium node API.\n\nThe `explorer-provider.ts` file defines the `ExplorerProvider` class, which acts as a wrapper around the `ExplorerApi` class. This class provides a simplified interface for interacting with the Oxygenium blockchain explorer API, with methods corresponding to different API endpoints such as `blocks`, `transactions`, `addresses`, and more. For example, to fetch information about a specific block:\n\n```typescript\nimport { ExplorerProvider } from 'oxygenium-web3';\n\nconst explorer = new ExplorerProvider();\nconst blockInfo = await explorer.blocks.get('block-hash');\n```\n\nThe `node-provider.ts` file defines the `NodeProvider` class, which serves as a wrapper around the Oxygenium node API. This class exposes methods that correspond to various API endpoints, such as `wallets`, `infos`, `blockflow`, and more. For example, to fetch the balance of an address:\n\n```typescript\nimport { NodeProvider } from 'oxygenium-web3';\n\nconst node = new NodeProvider();\nconst balance = await node.addresses.getBalance('address');\n```\n\nThe `types.ts` file contains utility functions and type definitions for interacting with the Oxygenium blockchain through its web3 API. It defines several functions for converting between different data types used in the API and the corresponding JavaScript types, as well as functions for parsing API responses and converting them into JavaScript objects.\n\nThe `utils.ts` file contains utility functions for making HTTP requests to an API and handling rate limiting and retries. These functions are designed to be used in the larger Oxygenium project, which likely involves interacting with an external API. For example, to make a rate-limited fetch request:\n\n```typescript\nimport { throttledFetch, convertHttpResponse } from 'oxygenium-web3';\n\nconst fetch = throttledFetch(5); // limit to 5 requests per second\nconst response = await fetch('https://api.example.com/data');\nconst data = await convertHttpResponse(response);\nconsole.log(data);\n```\n\nThe `index.ts` file serves as a central point for exporting all the important modules and functions from the oxygenium-web3 project, making them easily accessible for use in other parts of the project or in external projects that depend on oxygenium-web3.\n\nOverall, the code in this folder provides a convenient and flexible way to interact with the Oxygenium blockchain through its web3 API, allowing developers to easily make requests to different API endpoints and handle responses in a type-safe manner.",
  "questions": ""
}