{
  "folderName": "utils",
  "folderPath": ".autodoc/docs/json/packages/web3/src/utils",
  "url": "https://github.com/oxygenium/oxygenium-web3/.autodoc/docs/json/packages/web3/src/utils",
  "files": [
    {
      "fileName": "address.ts",
      "filePath": "packages/web3/src/utils/address.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3/src/utils/address.ts",
      "summary": "This file contains a function called `addressToGroup` and two helper functions called `xorByte` and `toPosInt`. The purpose of this code is to take an Ethereum address and map it to a specific group number based on the total number of groups specified. This is useful for partitioning a large set of addresses into smaller groups for more efficient processing.\n\nThe `addressToGroup` function takes two arguments: the Ethereum address as a string and the total number of groups as a number. It first decodes the address using the `bs58` library and removes the first byte. It then passes the remaining bytes to the `djb2` function, which returns a hash value. This hash value is then passed to the `xorByte` function, which performs a bitwise XOR operation on the first three bytes and the original value, and returns the result. Finally, the `toPosInt` function is called on the XOR result to ensure that the value is a positive integer. This integer is then used to calculate the group number by taking the modulus of the total number of groups.\n\nFor example, if we have 1000 Ethereum addresses and we want to partition them into 10 groups, we can use this function to map each address to a group number between 0 and 9. This can be useful for parallel processing or load balancing, as each group can be processed independently.\n\nOverall, this code provides a simple and efficient way to map Ethereum addresses to group numbers based on a hash function and XOR operation.",
      "questions": "1. What is the purpose of this code and what does it do?\n- This code is a function that takes an address and a total number of groups as input, and returns a number representing the group to which the address belongs. It does this by decoding the address using base58 encoding, hashing the resulting bytes using the djb2 algorithm, and then performing some bitwise operations to determine the group.\n\n2. What are the dependencies of this code?\n- This code has two dependencies, which are imported at the top of the file: `bs58` and `djb2`. `bs58` is a library for encoding and decoding base58 strings, and `djb2` is a hash function that takes an array of bytes as input and returns a hash value.\n\n3. What license is this code released under?\n- This code is released under the GNU Lesser General Public License, version 3 or later. This means that the code is free software and can be redistributed and modified, but any modifications must also be released under the same license. The license also includes a disclaimer of warranty and a requirement to include a copy of the license with the software."
    },
    {
      "fileName": "bs58.ts",
      "filePath": "packages/web3/src/utils/bs58.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3/src/utils/bs58.ts",
      "summary": "This file contains code related to Base58 encoding and decoding. Base58 is a binary-to-text encoding scheme that is commonly used in Bitcoin and other cryptocurrencies. The purpose of this code is to provide a library for encoding and decoding data using the Base58 algorithm.\n\nThe code imports the `base-x` library, which is a JavaScript library for encoding and decoding data using custom alphabets. The `ALPHABET` constant is defined as a string of characters that are used in the Base58 encoding scheme. The `bs58` constant is then defined as a new instance of the `basex` function, which is initialized with the `ALPHABET` constant.\n\nThe `isBase58` function is defined to check whether a given string is a valid Base58-encoded string. It first checks if the string is empty or contains only whitespace characters, and returns `false` if it is. It then attempts to decode the string using the `bs58` constant, and encodes the decoded data using `bs58` again. If the resulting string is equal to the original input string, then the input string is a valid Base58-encoded string and the function returns `true`. Otherwise, the function returns `false`.\n\nFinally, the `bs58` constant is exported as the default export of the module. This allows other modules to import the `bs58` constant and use it for encoding and decoding data using the Base58 algorithm.\n\nOverall, this code provides a simple and efficient implementation of Base58 encoding and decoding, which can be used in various parts of the larger project. For example, it may be used to encode and decode cryptocurrency addresses or transaction data.",
      "questions": "1. What is the purpose of this code and how does it relate to the overall oxygenium project?\n   - This code provides a function for encoding and decoding data using the Base58 algorithm, and it is part of the oxygenium-web3 project.\n2. What license is this code released under?\n   - This code is released under the GNU Lesser General Public License, version 3 or later, as well as the MIT License.\n3. What is the significance of the `ALPHABET` constant and why was it chosen?\n   - The `ALPHABET` constant defines the characters used in the Base58 encoding scheme, and it was chosen to exclude characters that can be easily confused with each other (such as 0/O and l/1), as well as to avoid characters that may be problematic in certain contexts (such as + and / in URLs)."
    },
    {
      "fileName": "djb2.ts",
      "filePath": "packages/web3/src/utils/djb2.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3/src/utils/djb2.ts",
      "summary": "The code provided is a JavaScript function called `djb2` that exports a hash function. The purpose of this function is to generate a hash value for a given input `Uint8Array` of bytes. The hash function uses the djb2 algorithm, which is a simple non-cryptographic hash function that is commonly used in hash tables.\n\nThe function takes in a single parameter, `bytes`, which is an array of unsigned 8-bit integers. The function iterates through each byte in the array and performs a series of bitwise operations to generate a hash value. The hash value is initialized to 5381 and then updated for each byte in the array using the following formula:\n\n```\nhash = (hash << 5) + hash + (bytes[i] & 0xff)\n```\n\nThe `<<` operator is a bitwise left shift, which shifts the bits of the `hash` value to the left by 5 positions. The `+` operator adds the original `hash` value to the shifted value. Finally, the bitwise AND operator `&` is used to mask the least significant 8 bits of the `bytes[i]` value, ensuring that only the first 8 bits are used in the calculation.\n\nOnce the function has iterated through all the bytes in the input array, it returns the resulting hash value as a 32-bit integer.\n\nThis function can be used in the larger project to generate hash values for various purposes, such as indexing data in a hash table or verifying the integrity of data. For example, if the project involves storing data in a hash table, this function can be used to generate a hash value for each piece of data, which can then be used to determine the index in the hash table where the data should be stored. Similarly, if the project involves verifying the integrity of data, this function can be used to generate a hash value for the original data and then compare it to the hash value of the received data to ensure that it has not been tampered with.\n\nExample usage:\n\n```\nimport djb2 from 'oxygenium-web3'\n\nconst data = new Uint8Array([0x01, 0x02, 0x03, 0x04])\nconst hash = djb2(data)\nconsole.log(hash) // Output: 1437863053\n```",
      "questions": "1. What is the purpose of this code and how is it used in the Oxygenium project?\n   - This code exports a function called `djb2` which takes in a Uint8Array and returns a hash value. A smart developer might want to know how this function is used in the Oxygenium project and what data types are typically passed in as arguments.\n   \n2. What is the algorithm used to generate the hash value and why was it chosen?\n   - The algorithm used to generate the hash value is called djb2. A smart developer might want to know why this algorithm was chosen over other hashing algorithms and what benefits it provides for the Oxygenium project.\n   \n3. What are the licensing terms for this code and how can it be used by other developers?\n   - This code is licensed under the GNU Lesser General Public License. A smart developer might want to know what this license entails and how it affects their ability to use and modify this code for their own projects."
    },
    {
      "fileName": "index.ts",
      "filePath": "packages/web3/src/utils/index.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3/src/utils/index.ts",
      "summary": "This file is a license file and does not contain any code that directly contributes to the functionality of the oxygenium-web3 project. Instead, it exports various modules that are used throughout the project. \n\nThe `export *` syntax is used to export all of the functions and classes from the specified modules. This allows other files in the project to import these modules and use their functionality without having to import each individual function or class separately. \n\nFor example, the `address` module likely contains functions for working with Oxygenium addresses, such as generating new addresses or validating existing ones. Another module, `bs58`, may contain functions for encoding and decoding data using the Base58 encoding scheme. \n\nBy exporting these modules from a single file, it makes it easier for other files in the project to access and use these functions without having to search through multiple files. \n\nOverall, this file serves as a central location for exporting various modules used throughout the oxygenium-web3 project.",
      "questions": "1. What is the purpose of this code file?\n   - This code file exports various modules from the `oxygenium-web3` project, including address, bs58, djb2, utils, subscription, sign, and number.\n\n2. What license is this code file released under?\n   - This code file is released under the GNU Lesser General Public License, version 3 or later.\n\n3. Are there any dependencies required for this code file to work properly?\n   - It is unclear from this code file whether there are any dependencies required for it to work properly. Further investigation into the `oxygenium-web3` project may be necessary to determine any dependencies."
    },
    {
      "fileName": "number.fixture.ts",
      "filePath": "packages/web3/src/utils/number.fixture.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3/src/utils/number.fixture.ts",
      "summary": "This file contains two arrays of objects, `tests` and `tests1`, which are used for testing and formatting numerical values in the Oxygenium blockchain. \n\nThe `tests` array contains objects with various numerical values in raw format, along with their corresponding decimal places and formatted versions in both Alphium and token formats. These objects are used to test the formatting functions in the larger project, ensuring that numerical values are displayed correctly in the user interface. \n\nThe `tests1` array contains objects with raw numerical values in string format, along with their corresponding decimal places and converted values in BigInt format. These objects are used to convert user inputted numerical values into the appropriate format for use in the blockchain. \n\nOverall, this file serves as a reference for the expected formatting and conversion of numerical values in the Oxygenium blockchain. \n\nExample usage of these arrays in the larger project:\n\n```\nimport { tests, tests1 } from 'oxygenium-web3/numericalValues';\n\n// Use tests array to test formatting functions\ntests.forEach((test) => {\n  const formattedValue = formatValue(test.raw, test.decimal);\n  console.log(`Raw value: ${test.raw}, Formatted value: ${formattedValue}`);\n});\n\n// Use tests1 array to convert user inputted values\nconst userInput = '1.23';\nconst decimals = 2;\nconst convertedValue = convertValue(userInput, decimals, tests1);\nconsole.log(`User input: ${userInput}, Converted value: ${convertedValue}`);\n```",
      "questions": "1. What is the purpose of this code file?\n- This code file contains two arrays of objects that are used for testing purposes.\n\n2. What is the significance of the `raw` and `decimal` properties in the `tests` array?\n- The `raw` property represents the raw value of a number, while the `decimal` property represents the number of decimal places to be displayed in various formats.\n\n3. What is the purpose of the `tests1` array?\n- The `tests1` array contains objects that represent different values and their corresponding decimal places, which are used for testing purposes."
    },
    {
      "fileName": "number.ts",
      "filePath": "packages/web3/src/utils/number.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3/src/utils/number.ts",
      "summary": "This file contains a set of utility functions for formatting and converting numbers used in the Oxygenium project. The functions are exported and can be used in other parts of the project.\n\nThe `prettifyNumber` function takes a `Number256` value, which is a custom type used in the project to represent large integers, and formats it as a string with a specified number of decimal places. The function uses a configuration object to determine the minimum and maximum number of decimal places, the minimum number of significant digits to show in decimals, and the number of decimal places to show when the value is zero. The function first converts the `Number256` value to a `BigNumber` object from the `bignumber.js` library, then formats the number based on its value and the configuration object. The function returns the formatted string or `undefined` if the input value is not numeric.\n\nThe `prettifyAttoAlphAmount`, `prettifyTokenAmount`, and `prettifyExactAmount` functions are wrappers around `prettifyNumber` that provide pre-configured settings for formatting `ALPH`, `TOKEN`, and `Exact` amounts, respectively. These functions take a `Number256` value and the number of decimal places to use and return the formatted string or `undefined`.\n\nThe `convertAmountWithDecimals` and `convertAlphAmountWithDecimals` functions convert a string or number to a `Number256` value with a specified number of decimal places. The `convertAmountWithDecimals` function takes a value and the number of decimal places to use and returns a `BigInt` value. The `convertAlphAmountWithDecimals` function is a wrapper around `convertAmountWithDecimals` that uses 18 decimal places, which is the standard for `ALPH` amounts in the project.\n\nThe `number256ToBigint` function converts a `Number256` value to a `BigInt` value. If the input value is already a `BigInt`, the function returns it unchanged. Otherwise, the function converts the input value to a `BigInt` using the `BigInt` constructor.\n\nOverall, this file provides a set of utility functions for formatting and converting numbers used in the Oxygenium project. These functions can be used in other parts of the project to ensure consistent formatting and conversion of numbers.",
      "questions": "1. What is the purpose of this code file?\n- This code file contains functions for prettifying and converting numbers with decimals, as well as a function for converting a Number256 type to a bigint.\n\n2. What is the significance of the IPrettifyNumberConfig interface and prettifyNumberConfig object?\n- The IPrettifyNumberConfig interface defines a configuration object for prettifying numbers with decimals, while the prettifyNumberConfig object contains specific configurations for different currencies (ALPH, TOKEN, and Exact).\n\n3. What is the purpose of the convertAmountWithDecimals and convertAlphAmountWithDecimals functions?\n- The convertAmountWithDecimals function converts an amount with a specified number of decimals to a bigint, while the convertAlphAmountWithDecimals function specifically converts an amount with 18 decimals (ALPH currency) to a bigint."
    },
    {
      "fileName": "sign.ts",
      "filePath": "packages/web3/src/utils/sign.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3/src/utils/sign.ts",
      "summary": "This file contains functions related to cryptographic signing and verification using elliptic curve cryptography (ECC) and the secp256k1 curve. The code imports the `elliptic` library for ECC and `@noble/secp256k1` for secp256k1 curve operations. It also imports other utility functions from the project's codebase.\n\nThe `sign` function takes a hash, private key, and an optional key type as input and returns a signature in hex format. The function first checks the key type and then uses the appropriate library to generate the signature. If the key type is `default`, the function uses the `elliptic` library to generate the signature. Otherwise, it uses the `@noble/secp256k1` library to generate the signature.\n\nThe `verifySignature` function takes a hash, public key, signature, and an optional key type as input and returns a boolean indicating whether the signature is valid. The function first checks the key type and then uses the appropriate library to verify the signature. If the key type is `default`, the function uses the `elliptic` library to verify the signature. Otherwise, it uses the `@noble/secp256k1` library to verify the signature.\n\nOverall, this file provides a way to sign and verify data using ECC and the secp256k1 curve. These functions can be used in the larger project to provide secure and authenticated communication between different components. For example, the `sign` function can be used to sign transactions before they are broadcasted to the network, and the `verifySignature` function can be used to verify the authenticity of incoming transactions.",
      "questions": "1. What is the purpose of this code file?\n- This code file provides functions for signing and verifying signatures using elliptic curve cryptography and secp256k1.\n\n2. What is the difference between the 'default' key type and other key types?\n- The 'default' key type uses elliptic curve cryptography to sign and verify signatures, while other key types use the schnorr signature algorithm.\n\n3. What is the purpose of the necc library and how is it used in this code?\n- The necc library provides an implementation of the schnorr signature algorithm, which is used as an alternative to elliptic curve cryptography for signing and verifying signatures. The code in this file uses the schnorr signature functions from the necc library when the key type is not 'default'."
    },
    {
      "fileName": "subscription.ts",
      "filePath": "packages/web3/src/utils/subscription.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3/src/utils/subscription.ts",
      "summary": "This file contains TypeScript code that defines a Subscription class and related interfaces. The Subscription class is an abstract class that provides a framework for creating objects that can subscribe to and receive messages from a remote server. The class is designed to be extended by other classes that implement the specific details of the subscription.\n\nThe Subscription class has several properties and methods that are used to manage the subscription. The pollingInterval property specifies the time interval between polling requests to the server. The messageCallback property is a callback function that is called when a message is received from the server. The errorCallback property is a callback function that is called when an error occurs during the subscription.\n\nThe startPolling method is used to start the subscription. It sets up an event listener that triggers a polling request to the server at the specified polling interval. If the subscription has not been cancelled, the event listener sets up another polling request after the specified interval has elapsed.\n\nThe unsubscribe method is used to cancel the subscription. It removes the event listener and sets a cancelled flag to true. If there is a polling task scheduled, it is cancelled using the clearTimeout method.\n\nThe SubscribeOptions interface is used to specify the options for creating a Subscription object. It includes the polling interval, message callback, and error callback.\n\nThe MessageCallback and ErrorCallback types are used to define the callback functions for the message and error events.\n\nThis code is part of the oxygenium-web3 project and can be used to create subscription objects that can receive messages from a remote server. For example, a developer could create a new class that extends the Subscription class and implements the polling method to make requests to a specific API endpoint. The messageCallback method could then be used to process the response data and update the application state accordingly.",
      "questions": "1. What is the purpose of this code?\n- This code defines a TypeScript abstract class `Subscription` and an interface `SubscribeOptions` with a few methods and properties that can be used to implement a polling-based subscription system.\n\n2. What is the license for this code?\n- This code is licensed under the GNU Lesser General Public License, version 3 or later.\n\n3. What is the purpose of the `MessageCallback` and `ErrorCallback` types?\n- The `MessageCallback` type is a function that takes a `Message` parameter and returns a `Promise` that resolves to `void`. It is used to handle incoming messages from the subscription.\n- The `ErrorCallback` type is a function that takes an `error` and a `Subscription` parameter and returns a `Promise` that resolves to `void`. It is used to handle errors that occur during the subscription."
    },
    {
      "fileName": "utils.ts",
      "filePath": "packages/web3/src/utils/utils.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3/src/utils/utils.ts",
      "summary": "This file contains utility functions and constants used in the Oxygenium project. \n\nThe `encodeSignature` function takes an elliptic curve signature object and returns a hex string representation of the signature. The `encodeHexSignature` function takes two hex strings representing the `r` and `s` values of a signature and returns a hex string representation of the signature. The `signatureDecode` function takes an elliptic curve object and a hex string representation of a signature and returns an object with `r` and `s` properties. \n\nThe `xorByte` function takes an integer value and returns the XOR of its four bytes. The `isHexString` function takes a string and returns `true` if it is a valid hex string. \n\nThe `groupOfAddress` function takes an Oxygenium address and returns the group number to which the address belongs. The `groupOfPrivateKey` function takes a private key and returns the group number to which the corresponding public key belongs. The `publicKeyFromPrivateKey` function takes a private key and returns the corresponding public key. The `addressFromPublicKey` function takes a public key and returns the corresponding Oxygenium address. The `addressFromContractId` function takes a contract ID and returns the corresponding Oxygenium address. The `addressFromTokenId` function takes a token ID and returns the corresponding Oxygenium address. The `contractIdFromTx` function takes a transaction ID and an output index and returns the corresponding contract ID. The `subContractId` function takes a parent contract ID, a path in hex format, and a group number, and returns a sub-contract ID. The `blockChainIndex` function takes a block hash and returns the \"from\" and \"to\" group numbers of the corresponding blockchain index. \n\nThe file also contains utility functions for converting between hex strings and binary data (`hexToBinUnsafe` and `binToHex`), for sleeping for a specified number of milliseconds (`sleep`), and for converting strings to hex and vice versa (`stringToHex` and `hexToString`). \n\nFinally, the file defines some types and constants used throughout the project, such as `networkIds`, `AddressType`, and `KeyType`.",
      "questions": "1. What is the purpose of this file?\n- This file contains utility functions for encoding and decoding signatures, working with addresses and contract IDs, and other miscellaneous tasks.\n\n2. What license is this code released under?\n- This code is released under the GNU Lesser General Public License, version 3 or later.\n\n3. What external libraries does this file depend on?\n- This file depends on the `elliptic`, `bn.js`, `blakejs`, `bs58`, and `buffer` libraries."
    }
  ],
  "folders": [],
  "summary": "The `utils` folder in the `oxygenium-web3` project contains various utility functions and classes that are used throughout the project for tasks such as encoding and decoding data, hashing, signing and verifying data, and working with numbers and addresses. These utilities are essential for the proper functioning of the project and can be used in different parts of the project as needed.\n\nFor example, the `address.ts` file provides a function called `addressToGroup` that maps an Ethereum address to a specific group number based on the total number of groups specified. This can be useful for partitioning a large set of addresses into smaller groups for more efficient processing. The usage of this function might look like this:\n\n```javascript\nimport { addressToGroup } from 'oxygenium-web3/utils/address';\n\nconst ethAddress = '0x742d35Cc6634C0532925a3b844Bc454e4438f44e';\nconst numberOfGroups = 10;\nconst groupNumber = addressToGroup(ethAddress, numberOfGroups);\nconsole.log(`Group number for address ${ethAddress}: ${groupNumber}`);\n```\n\nThe `bs58.ts` file provides a library for encoding and decoding data using the Base58 algorithm, which is commonly used in cryptocurrencies. This can be used to encode and decode cryptocurrency addresses or transaction data. An example usage might be:\n\n```javascript\nimport bs58 from 'oxygenium-web3/utils/bs58';\n\nconst encodedData = '5Kd3NBUAdUnhyzenEwVLy9pBKxSwXvE9FMPyR4UKZvpe6E3AgLr';\nconst decodedData = bs58.decode(encodedData);\nconsole.log(`Decoded data: ${decodedData.toString('hex')}`);\n```\n\nThe `djb2.ts` file exports a hash function that generates a hash value for a given input `Uint8Array` of bytes using the djb2 algorithm. This can be used for indexing data in a hash table or verifying the integrity of data. Example usage:\n\n```javascript\nimport djb2 from 'oxygenium-web3/utils/djb2';\n\nconst data = new Uint8Array([0x01, 0x02, 0x03, 0x04]);\nconst hash = djb2(data);\nconsole.log(`Hash value: ${hash}`);\n```\n\nThe `number.ts` file provides utility functions for formatting and converting numbers used in the Oxygenium project. These functions can be used to ensure consistent formatting and conversion of numbers. Example usage:\n\n```javascript\nimport { prettifyAttoAlphAmount } from 'oxygenium-web3/utils/number';\n\nconst rawAmount = '1000000000000000000';\nconst formattedAmount = prettifyAttoAlphAmount(rawAmount);\nconsole.log(`Formatted amount: ${formattedAmount}`);\n```\n\nIn summary, the `utils` folder contains essential utility functions and classes that are used throughout the `oxygenium-web3` project to perform various tasks such as encoding, decoding, hashing, signing, verifying, and working with numbers and addresses. These utilities can be imported and used in different parts of the project as needed.",
  "questions": ""
}