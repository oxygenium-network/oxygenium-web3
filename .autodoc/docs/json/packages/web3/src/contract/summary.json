{
  "folderName": "contract",
  "folderPath": ".autodoc/docs/json/packages/web3/src/contract",
  "url": "https://github.com/oxygenium/oxygenium-web3/.autodoc/docs/json/packages/web3/src/contract",
  "files": [
    {
      "fileName": "events.ts",
      "filePath": "packages/web3/src/contract/events.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3/src/contract/events.ts",
      "summary": "This file contains code for an event subscription class and a function to subscribe to events. The purpose of this code is to allow users to subscribe to events emitted by a smart contract on the Oxygenium blockchain. \n\nThe `EventSubscription` class extends a `Subscription` class and takes in a `SubscribeOptions` object and a contract address as parameters. It also has a `fromCount` property that keeps track of the number of events that have been processed so far. The `startPolling` method sets up an event listener that triggers the `polling` method to fetch new events. The `polling` method fetches events emitted by the contract using the `web3` library and processes them by calling the `messageCallback` function. If there are more events to fetch, the `fromCount` property is updated and the `polling` method is called again. \n\nThe `subscribeToEvents` function takes in the same parameters as the `EventSubscription` class and returns a new instance of the `EventSubscription` class. This function can be used by developers to subscribe to events emitted by a smart contract on the Oxygenium blockchain. \n\nHere is an example of how this code can be used:\n\n```\nimport { subscribeToEvents } from 'oxygenium-web3'\n\nconst contractAddress = '0x1234567890abcdef'\nconst options = {\n  messageCallback: (event) => console.log(event),\n  errorCallback: (err) => console.error(err),\n  pollingInterval: 5000\n}\n\nconst subscription = subscribeToEvents(options, contractAddress)\n```\n\nIn this example, we import the `subscribeToEvents` function from the `oxygenium-web3` library and pass in the contract address and subscription options. The `messageCallback` function logs the event to the console, the `errorCallback` function logs any errors to the console, and the `pollingInterval` is set to 5 seconds. The `subscribeToEvents` function returns a new instance of the `EventSubscription` class, which can be used to start listening for events emitted by the specified contract.",
      "questions": "1. What is the purpose of this code and what does it do?\n   \n   This code defines a class `EventSubscription` and a function `subscribeToEvents` that allow developers to subscribe to events emitted by a smart contract on the Oxygenium blockchain. The `EventSubscription` class extends a `Subscription` class and overrides some of its methods to implement polling for new events and handling of event data.\n\n2. What is the license for this code and where can I find more information about it?\n   \n   This code is licensed under the GNU Lesser General Public License (LGPL) version 3 or later. Developers can find more information about the license and its terms at <http://www.gnu.org/licenses/>.\n\n3. What are the parameters for the `subscribeToEvents` function and how do I use it?\n   \n   The `subscribeToEvents` function takes three parameters: `options`, `contractAddress`, and `fromCount`. `options` is an object that specifies the callback functions to be called when new events are received or when an error occurs. `contractAddress` is a string that specifies the address of the smart contract to subscribe to. `fromCount` is an optional parameter that specifies the starting event count for polling. Developers can use this function to create a new `EventSubscription` object and start receiving events from the specified smart contract."
    },
    {
      "fileName": "index.ts",
      "filePath": "packages/web3/src/contract/index.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/web3/src/contract/index.ts",
      "summary": "This code exports three modules from the oxygenium-web3 project: `ralph`, `contract`, and `events`. \n\nThe `ralph` module likely contains functions and classes related to interacting with the Oxygenium blockchain, such as sending transactions or querying for information about the blockchain. The `contract` module likely contains functions and classes related to interacting with smart contracts on the Oxygenium blockchain. The `events` module likely contains functions and classes related to subscribing to and handling events emitted by the Oxygenium blockchain.\n\nBy exporting these modules, other parts of the oxygenium-web3 project can import and use them as needed. For example, a developer building a decentralized application on the Oxygenium blockchain could import the `contract` module to interact with their smart contracts.\n\nHere is an example of how the `contract` module might be used:\n\n```\nimport { Contract } from 'oxygenium-web3'\n\nconst myContract = new Contract('0x123abc...', abi)\n\n// Call a function on the contract\nconst result = await myContract.methods.myFunction().call()\n\n// Send a transaction to the contract\nawait myContract.methods.myFunction().send({ from: '0x456def...', value: 100 })\n```",
      "questions": "1. What is the purpose of the `oxygenium-web3` project?\n- As a code documentation expert, I do not have enough information to answer this question. It is not provided in the given code snippet.\n\n2. What is the significance of the GNU Lesser General Public License mentioned in the comments?\n- The GNU Lesser General Public License is the license under which the library is distributed. It allows for redistribution and modification of the library under certain conditions.\n\n3. What are the contents of the `ralph`, `contract`, and `events` modules being exported?\n- As a code documentation expert, I do not have enough information to answer this question. It is not provided in the given code snippet."
    }
  ],
  "folders": [],
  "summary": "The `oxygenium-web3` project provides a set of tools for developers to interact with the Oxygenium blockchain and smart contracts. In the `contract` folder, there are two main files: `events.ts` and `index.ts`.\n\n`events.ts` contains the `EventSubscription` class and the `subscribeToEvents` function. The `EventSubscription` class is designed to allow users to subscribe to events emitted by a smart contract on the Oxygenium blockchain. It extends a `Subscription` class and takes in a `SubscribeOptions` object and a contract address as parameters. The class has a `fromCount` property to keep track of the number of events processed so far. The `startPolling` method sets up an event listener that triggers the `polling` method to fetch new events. The `polling` method fetches events emitted by the contract using the `web3` library and processes them by calling the `messageCallback` function. If there are more events to fetch, the `fromCount` property is updated, and the `polling` method is called again.\n\nDevelopers can use the `subscribeToEvents` function to subscribe to events emitted by a smart contract on the Oxygenium blockchain. Here's an example:\n\n```javascript\nimport { subscribeToEvents } from 'oxygenium-web3'\n\nconst contractAddress = '0x1234567890abcdef'\nconst options = {\n  messageCallback: (event) => console.log(event),\n  errorCallback: (err) => console.error(err),\n  pollingInterval: 5000\n}\n\nconst subscription = subscribeToEvents(options, contractAddress)\n```\n\n`index.ts` exports three modules from the `oxygenium-web3` project: `ralph`, `contract`, and `events`. These modules provide various functionalities for interacting with the Oxygenium blockchain, smart contracts, and events. By exporting these modules, other parts of the `oxygenium-web3` project can import and use them as needed.\n\nFor example, a developer building a decentralized application on the Oxygenium blockchain could import the `contract` module to interact with their smart contracts:\n\n```javascript\nimport { Contract } from 'oxygenium-web3'\n\nconst myContract = new Contract('0x123abc...', abi)\n\n// Call a function on the contract\nconst result = await myContract.methods.myFunction().call()\n\n// Send a transaction to the contract\nawait myContract.methods.myFunction().send({ from: '0x456def...', value: 100 })\n```\n\nIn summary, the `contract` folder in the `oxygenium-web3` project provides tools for developers to interact with smart contracts and events on the Oxygenium blockchain. The `EventSubscription` class and `subscribeToEvents` function enable developers to subscribe to and handle events emitted by smart contracts, while the exported modules in `index.ts` allow for easy integration with other parts of the project.",
  "questions": ""
}