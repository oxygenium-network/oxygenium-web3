{
  "folderName": "src",
  "folderPath": ".autodoc/docs/json/packages/get-extension-wallet/src",
  "url": "https://github.com/oxygenium/oxygenium-web3/.autodoc/docs/json/packages/get-extension-wallet/src",
  "files": [
    {
      "fileName": "getAlephium.ts",
      "filePath": "packages/get-extension-wallet/src/getAlephium.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/get-extension-wallet/src/getAlephium.ts",
      "summary": "This file contains a set of functions that are used to interact with Alephium wallets. The functions are designed to help users interact with different wallet providers and retrieve wallet objects. \n\nThe `getDefaultAlephiumWallet()` function is used to retrieve the default Alephium wallet. It returns a promise that resolves to an `AlephiumWindowObject` or `undefined`. \n\nThe `scanKnownWallets()` function is used to scan all known wallet providers and retrieve their wallet objects. It returns a promise that resolves to an array of `AlephiumWindowObject`s. \n\nThe `getKnownWallet()` function is used to retrieve the wallet object for a specific wallet provider. It takes a `WalletProvider` object as an argument and returns a promise that resolves to an `AlephiumWindowObject` or `undefined`. \n\nThe `getWalletObject()` function is used to retrieve the wallet object for a specific wallet provider ID. It takes a string ID as an argument and returns an `AlephiumWindowObject` or `undefined`. \n\nThe `isWalletObj()` function is used to check if a given object is a valid wallet object. It takes an object as an argument and returns a boolean value. \n\nOverall, these functions are used to help users interact with different wallet providers and retrieve wallet objects. They are an important part of the Alephium project and are used extensively throughout the codebase.",
      "questions": "1. What is the purpose of this code?\n- This code provides functions for interacting with known Alephium wallets.\n\n2. What is the significance of the `getDefaultAlephiumWallet` function?\n- The `getDefaultAlephiumWallet` function returns the default Alephium wallet, which is the wallet associated with the AlephiumProvider.\n\n3. What is the purpose of the `isWalletObj` function?\n- The `isWalletObj` function checks whether an object is a valid Alephium wallet object by verifying that it has certain required methods and members."
    },
    {
      "fileName": "index.ts",
      "filePath": "packages/get-extension-wallet/src/index.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/get-extension-wallet/src/index.ts",
      "summary": "This code is a license header and a set of exports for the Alephium Web3 library. The purpose of this code is to provide licensing information and to export various modules that are used in the larger Alephium Web3 project.\n\nThe license header specifies that the Alephium Web3 library is free software that can be redistributed and modified under the terms of the GNU Lesser General Public License. This license allows users to use, modify, and distribute the library as long as they comply with the terms of the license.\n\nThe exports in this code allow other modules in the Alephium Web3 project to access the functionality provided by the `types`, `knownProviders`, and `getAlephium` modules. These modules provide various functions and data structures that are used throughout the project.\n\nFor example, the `types` module provides TypeScript interfaces for various data structures used in the Alephium Web3 project. These interfaces can be used to ensure that data passed between modules is of the correct type.\n\n```typescript\nimport { Block } from 'oxygenium-web3/types'\n\nfunction processBlock(block: Block) {\n  // process the block\n}\n```\n\nThe `knownProviders` module provides a list of known Alephium node providers that can be used to connect to the Alephium network. This list can be used to automatically select a provider based on the user's location or other factors.\n\n```typescript\nimport { knownProviders } from 'oxygenium-web3/knownProviders'\n\nconst provider = knownProviders[0] // select the first provider in the list\n```\n\nThe `getAlephium` module provides a function for creating an instance of the Alephium Web3 library. This function takes a provider URL as an argument and returns an instance of the library that is connected to the specified provider.\n\n```typescript\nimport { getAlephium } from 'oxygenium-web3/getAlephium'\n\nconst providerUrl = 'https://example.com/oxygenium'\nconst oxygenium = getAlephium(providerUrl)\n```\n\nOverall, this code provides licensing information and exports various modules that are used throughout the Alephium Web3 project. These modules provide functionality for working with the Alephium network and can be used by other modules in the project to build more complex functionality.",
      "questions": "1. What is the purpose of this code file?\n   - This code file exports various modules from other files in the `oxygenium-web3` project.\n\n2. What license is this code file released under?\n   - This code file is released under the GNU Lesser General Public License, version 3 or later.\n\n3. What other modules are being exported from this file?\n   - This file is exporting modules named `types`, `knownProviders`, and `getAlephium` from other files in the `oxygenium-web3` project."
    },
    {
      "fileName": "knownProviders.ts",
      "filePath": "packages/get-extension-wallet/src/knownProviders.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/get-extension-wallet/src/knownProviders.ts",
      "summary": "This code defines a wallet provider for the Alephium blockchain and exports it for use in the larger project. The `oxygeniumProvider` object contains metadata about the provider, including an ID, name, icon, and download links for the Chrome and Firefox extensions. This object is then added to the `knownProviders` array, which is used to keep track of all available wallet providers.\n\nThe `checkProviderMetadata` function takes in a `wallet` object and a `provider` object and returns a boolean indicating whether the `wallet` object matches the `provider` object based on their ID and name. This function is used to verify that the user's selected wallet provider is valid and supported by the Alephium-web3 library.\n\nOverall, this code provides a standardized way for users to connect their wallets to the Alephium blockchain and ensures that only supported wallet providers are used. It can be used in conjunction with other modules in the Alephium-web3 project to enable wallet functionality for dApps and other blockchain applications. \n\nExample usage:\n\n```\nimport { oxygeniumProvider, knownProviders, checkProviderMetadata } from 'oxygenium-web3'\n\n// Check if a wallet matches the Alephium provider\nconst wallet = { id: 'oxygenium', name: 'Alephium', version: '1.0.0' }\nconst isAlephiumProvider = checkProviderMetadata(wallet, oxygeniumProvider) // true\n\n// Get all known wallet providers\nconst providers = knownProviders // [oxygeniumProvider]\n```",
      "questions": "1. What is the purpose of this code file?\n- This code file defines a wallet provider object for the Alephium blockchain and exports it along with a list of known providers and a function to check provider metadata.\n\n2. What is the license for this code?\n- This code is licensed under the GNU Lesser General Public License version 3 or later.\n\n3. Where can I find the Alephium extension wallet for Chrome and Firefox?\n- The Chrome extension can be found at https://chrome.google.com/webstore/detail/oxygenium-extension-wallet and the Firefox extension can be found at https://addons.mozilla.org/en-US/firefox/addon/oxygenium-extension-wallet."
    },
    {
      "fileName": "types.ts",
      "filePath": "packages/get-extension-wallet/src/types.ts",
      "url": "https://github.com/oxygenium/oxygenium-web3/packages/get-extension-wallet/src/types.ts",
      "summary": "This file contains TypeScript code that defines several classes and functions related to interacting with the Alephium blockchain network using the web3 API. The code is licensed under the GNU Lesser General Public License.\n\nThe `AlephiumWindowObject` class is an abstract class that extends the `InteractiveSignerProvider` class from the `@oxygenium/web3` package. It defines several abstract properties and methods that must be implemented by any concrete subclass. These properties and methods are used to provide information about the wallet provider, such as its ID, name, icon, and version, as well as to check whether the user is preauthorized to use the wallet provider and to enable the wallet provider if the user is connected to the network.\n\nThe `WalletProvider` type is an interface that defines the properties of a wallet provider, including its ID, name, icon, and download links for Chrome and Firefox.\n\nThe `providerInitializedEvent` function is a utility function that returns a string representing the name of an event that is emitted when a wallet provider is initialized.\n\nThis code is part of the larger `oxygenium-web3` project, which provides a JavaScript library for interacting with the Alephium blockchain network using the web3 API. The `AlephiumWindowObject` class is intended to be subclassed by concrete wallet provider implementations, which can then be used to enable users to interact with the Alephium network using their preferred wallet provider. The `WalletProvider` type is used to define the properties of a wallet provider, and the `providerInitializedEvent` function is used to emit an event when a wallet provider is initialized.",
      "questions": "1. What is the purpose of this code and what does it do?\n- This code defines an abstract class `AlephiumWindowObject` and a type `WalletProvider` for interacting with the Alephium blockchain network using the `@oxygenium/web3` library. It also exports a function `providerInitializedEvent` that returns a string for a provider initialized event.\n\n2. What is the significance of the `EnableOptions` type and how is it used?\n- The `EnableOptions` type is an alias for `EnableOptionsBase` from the `@oxygenium/web3` library and is used as a parameter for enabling a signer provider. It contains options such as the network ID and the signer provider URL.\n\n3. What is the purpose of the `enableIfConnected` method in the `AlephiumWindowObject` class?\n- The `enableIfConnected` method is used to enable a signer provider if the user is preauthorized to use it. It checks if the user is preauthorized by calling the `isPreauthorized` method and returns the connected account if the user is preauthorized, otherwise it returns undefined."
    }
  ],
  "folders": [],
  "summary": "The code in the `get-extension-wallet/src` folder provides essential functionality for interacting with Alephium wallets using the Alephium Web3 library. It contains several functions and data structures that enable users to connect their wallets to the Alephium blockchain and ensure that only supported wallet providers are used.\n\nFor instance, the `getAlephium.ts` file contains functions like `getDefaultAlephiumWallet()`, `scanKnownWallets()`, `getKnownWallet()`, `getWalletObject()`, and `isWalletObj()`. These functions help users retrieve wallet objects from different wallet providers and interact with them. For example, to get the default Alephium wallet, one can use the following code:\n\n```typescript\nimport { getDefaultAlephiumWallet } from 'get-extension-wallet/src/getAlephium'\n\nconst defaultWallet = await getDefaultAlephiumWallet()\n```\n\nThe `index.ts` file exports various modules, such as `types`, `knownProviders`, and `getAlephium`, which are used throughout the Alephium Web3 project. These modules provide functionality for working with the Alephium network and can be used by other modules in the project to build more complex functionality.\n\nThe `knownProviders.ts` file defines a wallet provider for the Alephium blockchain and exports it for use in the larger project. The `oxygeniumProvider` object contains metadata about the provider, and the `checkProviderMetadata` function is used to verify that the user's selected wallet provider is valid and supported by the Alephium-web3 library. Example usage:\n\n```typescript\nimport { oxygeniumProvider, knownProviders, checkProviderMetadata } from 'get-extension-wallet/src/knownProviders'\n\nconst wallet = { id: 'oxygenium', name: 'Alephium', version: '1.0.0' }\nconst isAlephiumProvider = checkProviderMetadata(wallet, oxygeniumProvider) // true\n```\n\nThe `types.ts` file defines several classes and functions related to interacting with the Alephium blockchain network using the web3 API. The `AlephiumWindowObject` class is intended to be subclassed by concrete wallet provider implementations, which can then be used to enable users to interact with the Alephium network using their preferred wallet provider. The `WalletProvider` type is used to define the properties of a wallet provider, and the `providerInitializedEvent` function is used to emit an event when a wallet provider is initialized.\n\nIn summary, the code in the `get-extension-wallet/src` folder plays a crucial role in the Alephium Web3 project by providing the necessary functionality for users to interact with different wallet providers and retrieve wallet objects. This code can be used in conjunction with other modules in the Alephium-web3 project to enable wallet functionality for dApps and other blockchain applications.",
  "questions": ""
}