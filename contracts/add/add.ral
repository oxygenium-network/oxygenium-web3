Contract Add(sub: Sub, mut result : U256) {
    event Add(x: U256, y: U256)
    event Add1(a: U256, b: U256)

    pub fn add(array: [U256; 2]) -> ([U256; 2]) {
        return addPrivate(array)
    }

    @using(updateFields = true)
    fn addPrivate(array: [U256; 2]) -> ([U256; 2]) {
        emit Add(array[0], array[1])
        emit Add1(array[0], array[1])
        result = result + array[0] + array[1]
        return [result, sub.sub(array)]
    }

    @using(preapprovedAssets = true)
    pub fn createSubContract(a: U256, path: ByteVec, subContractId: ByteVec, payer: Address) -> () {
        copyCreateSubContract!{payer -> OXM: 1 alph}(path, subContractId, #00, Sub.encodeMutFields!(a))
    }

    @using(checkExternalCaller = false, assetsInContract = true)
    pub fn destroy(caller: Address) -> () {
        destroySelf!(caller)
    }
}

TxScript Main(addContractId: ByteVec) {
    let add = Add(addContractId)
    add.add([2, 1])
}
