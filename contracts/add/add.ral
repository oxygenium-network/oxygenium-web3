struct AddStruct1 {
    a: U256,
    b: [AddStruct2; 2]
}

struct AddStruct2 {
    a: U256,
    b: [U256; 2]
}

Contract Add(sub: Sub, mut result : U256) {
    event Add(x: U256, y: U256)
    event Add1(a: U256, b: U256)
    event Empty()

    pub fn add(array: [U256; 2]) -> ([U256; 2]) {
        return addPrivate(array)
    }

    pub fn add2(array1: [U256; 2], address: Address, array2: [U256; 2], addS: AddStruct1) -> ([U256; 2]) {
        return addPrivate(array1)
    }

    @using(updateFields = true)
    fn addPrivate(array: [U256; 2]) -> ([U256; 2]) {
        emit Debug(`addPrivate`)
        emit Add(array[0], array[1])
        emit Add1(array[0], array[1])
        emit Empty()
        result = result + array[0] + array[1]
        return [result, sub.sub(array)]
    }

    @using(preapprovedAssets = true)
    pub fn createSubContract(a: U256, path: ByteVec, subContractId: ByteVec, payer: Address) -> () {
        let (immFields, mutFields) = Sub.encodeFields!(a)
        copyCreateSubContract!{payer -> OXM: minimalContractDeposit!()}(path, subContractId, immFields, mutFields)
    }

    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn createSubContractAndTransfer(a: U256, path: ByteVec, subContractId: ByteVec, payer: Address) -> () {
        let (immFields, mutFields) = Sub.encodeFields!(a)
        transferTokenToSelf!(payer, subContractId, 200)
        copyCreateSubContract!{payer -> OXM: minimalContractDeposit!()}(path, subContractId, immFields, mutFields)
    }

    @using(checkExternalCaller = false, assetsInContract = true)
    pub fn destroy(caller: Address) -> () {
        destroySelf!(caller)
    }
}

TxScript AddMain(add: Add, array: [U256; 2]) {
    add.add(array)
}
