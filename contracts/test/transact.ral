Contract Transact(
    tokenId: ByteVec,
    mut totalOXM: U256,
    mut totalTokens: U256
) {
    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn deposit() -> () {
        transferTokenToSelf!(callerAddress!(), OXM, 1 alph)
        totalOXM = totalOXM + 1 alph
        return
    }

    @using(preapprovedAssets = false, assetsInContract = true)
    pub fn withdraw() -> () {
        transferTokenFromSelf!(callerAddress!(), OXM, 1 alph)
        totalOXM = totalOXM - 1 alph
        return
    }

    @using(preapprovedAssets = true, assetsInContract = true)
    pub fn depositToken(amount: U256) -> () {
        transferTokenToSelf!(callerAddress!(), tokenId, amount)
        totalTokens = totalTokens + amount
        return
    }

    @using(preapprovedAssets = false, assetsInContract = true)
    pub fn withdrawToken(amount: U256) -> () {
        transferTokenFromSelf!(callerAddress!(), tokenId, amount)
        totalTokens = totalTokens - amount
        return
    }

    pub fn getTotalOXM() -> U256 {
        return totalOXM
    }

    pub fn getTotalTokens() -> U256 {
        return totalTokens
    }
}

TxScript MultiDeposit(c: [Transact; 2], tokenId: ByteVec) {
    c[0].deposit{callerAddress!() -> OXM: 1 alph}()
    c[1].deposit{callerAddress!() -> OXM: 1 alph}()
    c[0].depositToken{callerAddress!() -> tokenId: 1e18}(1e18)
    c[1].depositToken{callerAddress!() -> tokenId: 1e18}(1e18)
}

TxScript MultiWithdraw(c: [Transact; 2]) {
    c[0].withdraw()
    c[1].withdraw()
    c[0].withdrawToken(1e18)
    c[1].withdrawToken(1e18)
}

TxScript Deposit(c: Transact) {
    c.deposit{callerAddress!() -> OXM: 1 alph}()
}

TxScript DepositToken(c: Transact, tokenId: ByteVec, amount: U256) {
    c.depositToken{callerAddress!() -> tokenId: amount}(amount)
}

TxScript Withdraw(c: Transact) {
    c.withdraw()
}
